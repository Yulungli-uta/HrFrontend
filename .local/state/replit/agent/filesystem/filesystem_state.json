{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# WsUtaSystem - Human Resources Management\n\n## Overview\n\nWsUtaSystem is a comprehensive Human Resources Management application built with a modern full-stack architecture. The system provides functionality for managing employee data, attendance tracking, permissions and vacations, payroll processing, and organizational publications. It features a React-based frontend with shadcn/ui components and an Express.js backend with PostgreSQL database integration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: shadcn/ui component library with Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **Forms**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database interactions\n- **Development**: Hot module replacement with Vite integration\n- **API Structure**: RESTful API with comprehensive CRUD operations\n- **Error Handling**: Centralized error handling middleware\n\n### Database Schema\nThe application uses PostgreSQL with the following main entities:\n- **Personas**: Employee personal information\n- **Contratos**: Employment contracts\n- **Puestos**: Job positions\n- **Turnos**: Shift management (plans, assignments, details)\n- **Marcaciones**: Attendance tracking\n- **Permisos**: Leave requests\n- **Vacaciones**: Vacation management\n- **Recuperaciones**: Make-up time tracking\n- **Subrogaciones**: Substitution assignments\n- **Nomina**: Payroll system (periods, concepts, movements)\n- **Hoja de Vida System**: Comprehensive CV management including:\n  - **Publicaciones**: Scientific publications and articles\n  - **Cargas Familiares**: Family dependents information\n  - **Experiencias Laborales**: Work experience history\n  - **Capacitaciones**: Trainings and courses\n  - **Libros**: Book publications\n  - **Contactos Emergencia**: Emergency contacts\n  - **Enfermedades Catastróficas**: Catastrophic illness records\n  - **Cuentas Bancarias**: Bank account information\n\n### Authentication & Authorization\nCurrently implements a basic user system with username-based authentication. The system is designed to support role-based access control expansion.\n\n### API Design Patterns\n- RESTful endpoints following `/api/{resource}` convention\n- JSON camelCase response format\n- CORS enabled for cross-origin requests\n- Consistent error response structure\n- Request/response logging middleware\n\n### Client-Server Communication\n- Type-safe API calls using shared schema definitions\n- Optimistic updates with TanStack Query\n- Real-time form validation with Zod schemas\n- Centralized error handling and toast notifications\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: Neon Database (serverless PostgreSQL)\n- **UI Components**: Radix UI primitives for accessible components\n- **Date Handling**: date-fns for date manipulation\n- **Icons**: Lucide React for consistent iconography\n\n### Development Tools\n- **Type Safety**: TypeScript with strict configuration\n- **Code Quality**: ESLint and Prettier (implied by structure)\n- **Build System**: Vite with TypeScript support\n- **Database Migrations**: Drizzle Kit for schema management\n\n### Runtime Dependencies\n- **Session Management**: connect-pg-simple for PostgreSQL session storage\n- **Form Validation**: Zod for runtime type validation\n- **HTTP Client**: Native fetch API with custom wrapper\n- **CSS Framework**: Tailwind CSS with PostCSS\n\nThe application is structured as a monorepo with shared TypeScript definitions between client and server, ensuring type consistency across the full stack. The architecture supports scalable development with clear separation of concerns and modern development practices.","size_bytes":4003},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom colors from design reference\n        surface: \"var(--surface)\",\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        error: \"var(--error)\",\n        // UTA Brand Colors\n        \"uta-blue\": {\n          DEFAULT: \"#1e40af\",\n          light: \"#3b82f6\",\n          dark: \"#1e3a8a\",\n        },\n        \"uta-orange\": {\n          DEFAULT: \"#f97316\", \n          light: \"#fb923c\",\n          dark: \"#ea580c\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3245},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/FRONTEND_SPEC_1755183060846.md":{"content":"# FRONTEND SPEC — WsUtaSystem (React)\n\n## Objetivo\nConstruir un frontend en **React** (Vite o CRA) que consuma la API **WsUtaSystem** para Gestión de Talento Humano.\n\n## Base API\n- Base URL: `http://localhost:5001`\n- Swagger: `/swagger` → JSON: `/swagger/v1/swagger.json`\n- JSON camelCase, CORS habilitado.\n\n## Recursos y rutas\n### Personas\n- GET `/api/personas`\n- GET `/api/personas/{id}`\n- POST `/api/personas` (body: `{ identificacion, nombres, apellidos, emailInstitucional? }`)\n- PUT `/api/personas/{id}`\n- DELETE `/api/personas/{id}`\n\n### Contratos\n- GET `/api/contratos`\n- POST `/api/contratos` (body: `{ personaId, puestoId, tipo, fechaInicio, sueldoBase }`)\n\n### Turnos\n- Planes: `/api/turnos/planes`\n- Detalles: `/api/turnos/detalles`\n- Asignaciones: `/api/turnos/asignaciones`\n\n### Marcaciones\n- `/api/marcaciones` (crear: `{ personaId, timestamp, tipo }`)\n\n### Permisos/Vacaciones/Recuperaciones\n- `/api/permisos` (crear: `{ personaId, tipo, desde, hasta, horas }`)\n- `/api/vacaciones`\n- `/api/recuperaciones`\n\n### Subrogaciones\n- `/api/subrogaciones`\n\n### Nómina\n- Periodos: `/api/nomina/periodos`\n- Conceptos: `/api/nomina/conceptos`\n- Movimientos: `/api/nomina/movimientos`\n\n### CV / Publicaciones\n- Educacion: `/api/cv/educacion`\n- Experiencia: `/api/cv/experiencia`\n- Certificaciones: `/api/cv/certificaciones`\n- Publicaciones: `/api/publicaciones`\n\n## Páginas sugeridas\n1. **Dashboard**: tarjetas de personas, contratos, marcaciones del día.\n2. **Personas**: listado, búsqueda, alta/edición, detalle con tabs (Contratos, Turnos, Asistencia, Permisos/Vacaciones, Nómina, CV, Publicaciones).\n3. **Asistencia**: carga de marcaciones, vista por fecha/persona.\n4. **Permisos & Vacaciones**: formularios + estado.\n5. **Nómina**: períodos, conceptos, movimientos (crear/editar).\n6. **Publicaciones**: CRUD sencillo con filtros por año/tipo.\n\n## Componentes y libs\n- Router: `react-router-dom`\n- HTTP: `fetch` o `axios`\n- UI: libre (MUI, AntD, Tailwind)\n- Formularios: `react-hook-form` + `zod` (validación)\n- Tablas: `@tanstack/react-table`\n\n## Helpers API (ejemplo)\n```ts\nexport const API_BASE = import.meta.env.VITE_API_BASE ?? \"http://localhost:5001\";\nasync function api(path: string, init?: RequestInit) {\n  const res = await fetch(`${API_BASE}${path}`, {\n    headers: { \"Content-Type\": \"application/json\" },\n    ...init,\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return res.status === 204 ? null : res.json();\n}\nexport const Personas = {\n  list: () => api(\"/api/personas\"),\n  get: (id:number) => api(`/api/personas/${id}`),\n  create: (data:any) => api(\"/api/personas\", { method:\"POST\", body: JSON.stringify(data) }),\n  update: (id:number, data:any) => api(`/api/personas/${id}`, { method:\"PUT\", body: JSON.stringify(data) }),\n  remove: (id:number) => api(`/api/personas/${id}`, { method:\"DELETE\" }),\n};\n```\n\n## .env ejemplo (Vite)\n```\nVITE_API_BASE=https://<tu-dominio-o-replit-app>\n```\n\n## Consideraciones\n- Manejar fechas: backend usa `DateOnly`/`DateTime` → en frontend enviar ISO strings.\n- Paginación/filtrado: implementar lado cliente inicialmente; luego backend.\n- Autenticación: fuera de alcance en esta versión; CORS ya habilitado.\n","size_bytes":3193},"attached_assets/FRONTEND_SPEC_WsUtaSystem_1755184923261.md":{"content":"\n# FRONTEND SPEC — WsUtaSystem (React)\n\n> Documento listo para IA (Replit u otro) que describe **todos los recursos, campos, validaciones y ejemplos** para construir el frontend de Gestión de Talento Humano que consume la API **WsUtaSystem**.\n\n## 0) Base\n- **API base (local):** `http://localhost:5000`\n- **Swagger UI:** `/swagger` → **Esquema JSON:** `/swagger/v1/swagger.json`\n- **Formato JSON:** camelCase\n- **CORS:** habilitado para `http://localhost:3000`, `http://localhost:5173`, `https://*.replit.app`\n- **Fechas:**\n  - `DateOnly` → enviar y mostrar como **YYYY-MM-DD**.\n  - `DateTime` → **ISO 8601** (ej: `2025-08-14T12:30:00Z`).\n\n---\n\n## 1) Modelos, campos y validaciones\n\n### 1.1 Persona\n```ts\ninterface Persona {\n  id: number;                         // autogenerado en BD\n  identificacion: string;             // requerido, 10 dígitos (cédula EC) o pasaporte\n  nombres: string;                    // requerido, 2–100 chars\n  apellidos: string;                  // requerido, 2–100 chars\n  emailInstitucional?: string | null; // opcional, email válido @uta.edu.ec idealmente\n  emailPersonal?: string | null;      // opcional, email válido\n}\n```\n**Validaciones sugeridas frontend:**\n- `identificacion`: `^[0-9A-Za-z]{8,20}$` (o algoritmo cédula EC si aplica).\n- `nombres/apellidos`: longitud 2–100, solo letras/espacios.\n- `email*`: formato email.\n\n**Endpoints:**\n- `GET /api/personas`\n- `GET /api/personas/{id}`\n- `POST /api/personas`\n- `PUT /api/personas/{id}`\n- `DELETE /api/personas/{id}`\n\n### 1.2 Puesto\n```ts\ninterface Puesto {\n  id: number;\n  nombre: string; // requerido, 2–100\n  unidad: string; // requerido, 2–100 (texto simple; en versión posterior será catálogo UNIDAD)\n}\n```\n**Endpoints:** `/api/puestos` (CRUD)\n\n### 1.3 Contrato\n```ts\ntype TipoContrato = \"TITULAR\" | \"OCASIONAL\" | \"CONTRATO\" | \"SERV_PROF\";\ninterface Contrato {\n  id: number;\n  personaId: number;                 // FK Persona\n  puestoId: number;                  // FK Puesto\n  tipo: TipoContrato;                // requerido (enum)\n  fechaInicio: string;               // YYYY-MM-DD\n  fechaFin?: string | null;          // YYYY-MM-DD (opcional)\n  sueldoBase: number;                // >= 0\n}\n```\n**Reglas UI:** evitar solapes de contratos activos por persona.  \n**Endpoints:** `/api/contratos` (CRUD)\n\n### 1.4 Turnos\n```ts\ninterface PlanTurno { id: number; puestoId: number; nombre: string; }\ninterface DetalleTurno {\n  id: number;\n  planTurnoId: number;\n  diaSemana: 0|1|2|3|4|5|6;      // 0=Domingo\n  horaEntrada: string;           // \"HH:mm:ss\" (recomendado \"HH:mm\")\n  horaSalida: string;\n  toleranciaMin: number;         // >= 0\n  descanso: boolean;\n}\ninterface AsignacionTurno {\n  id: number;\n  personaId: number;\n  planTurnoId: number;\n  desde: string;                 // YYYY-MM-DD\n  hasta?: string | null;         // YYYY-MM-DD\n}\n```\n**Endpoints:**\n- `/api/turnos/planes` (CRUD)\n- `/api/turnos/detalles` (CRUD)\n- `/api/turnos/asignaciones` (CRUD)\n\n### 1.5 Marcación (Asistencia)\n```ts\ntype TipoMarcacion = \"ENTRADA\" | \"SALIDA\";\ninterface Marcacion {\n  id: number;\n  personaId: number;\n  timestamp: string;     // ISO 8601\n  tipo: TipoMarcacion;\n  origen: string;        // por defecto \"WEB\"\n  valido: boolean;       // por defecto true\n}\n```\n**Endpoints:** `/api/marcaciones` (CRUD)\n\n### 1.6 Permisos / Vacaciones / Recuperaciones\n```ts\ntype EstadoSolicitud = \"SOLICITADO\" | \"APROBADO\" | \"RECHAZADO\" | \"REGISTRADO\";\n\ninterface Permiso {\n  id: number;\n  personaId: number;\n  tipo: string;          // ejemplo \"PERSONAL\"|\"MEDICO\"|... (texto libre en esta versión)\n  desde: string;         // ISO 8601\n  hasta: string;         // ISO 8601 (>= desde)\n  horas: number;         // >= 0\n  estado: EstadoSolicitud;\n  motivo?: string | null;\n}\n\ninterface Vacacion {\n  id: number;\n  personaId: number;\n  periodoInicio: string; // YYYY-MM-DD\n  periodoFin: string;    // YYYY-MM-DD\n  diasGenerados: number; // >= 0\n  diasTomados: number;   // >= 0\n}\n\ninterface Recuperacion {\n  id: number;\n  permisoId: number;     // FK Permiso\n  personaId: number;     // FK Persona\n  desde: string;         // ISO 8601\n  hasta: string;         // ISO 8601\n  horas: number;         // >= 0\n  estado: EstadoSolicitud;\n}\n```\n**Endpoints:**\n- `/api/permisos` (CRUD)\n- `/api/vacaciones` (CRUD)\n- `/api/recuperaciones` (CRUD)\n\n### 1.7 Subrogación\n```ts\ninterface Subrogacion {\n  id: number;\n  personaTitularId: number;     // FK Persona\n  personaSubroganteId: number;  // FK Persona\n  puestoId: number;             // FK Puesto\n  desde: string;                // YYYY-MM-DD\n  hasta?: string | null;        // YYYY-MM-DD\n  estado: string;               // \"VIGENTE\" | \"PROGRAMADA\" | \"TERMINADA\" (texto libre en esta versión)\n}\n```\n**Endpoints:** `/api/subrogaciones` (CRUD)\n\n### 1.8 Nómina\n```ts\ntype TipoConcepto = \"INGRESO\" | \"DESCUENTO\" | \"APORTE\" | \"PROVISION\";\n\ninterface Nomina {\n  id: number;\n  periodo: string;     // YYYY-MM-DD (día 1 del mes)\n  estado: string;      // \"ABIERTA\"|\"CALCULADA\"|\"CERRADA\"|\"PAGADA\" (texto libre aquí)\n}\ninterface ConceptoNomina {\n  id: number;\n  codigo: string;      // requerido, único deseable (UI validarlo)\n  nombre: string;      // requerido\n  tipo: TipoConcepto;  // enum\n  imponible: boolean;  // default true\n}\ninterface MovimientoNomina {\n  id: number;\n  nominaId: number;        // FK Nomina\n  personaId: number;       // FK Persona\n  contratoId?: number|null;// FK Contrato\n  conceptoNominaId: number;// FK ConceptoNomina\n  cantidad: number;        // >= 0\n  valor: number;           // puede ser negativo para descuentos\n  fuente: string;          // \"MANUAL\" | \"CALCULO\"\n}\n```\n**Endpoints:**\n- `/api/nomina/periodos` (CRUD)\n- `/api/nomina/conceptos` (CRUD)\n- `/api/nomina/movimientos` (CRUD)\n\n> **Nota:** La versión actual no incluye el endpoint `POST /api/nomina/{id}/calcular` en este proyecto; si se habilita, documentarlo aquí.\n\n### 1.9 CV / Publicaciones\n```ts\ninterface Educacion {\n  id: number;\n  personaId: number;\n  nivel: string;         // p.ej. \"Maestría\"\n  titulo: string;\n  institucion: string;\n  inicio?: string|null;  // YYYY-MM-DD\n  fin?: string|null;     // YYYY-MM-DD\n}\ninterface Experiencia {\n  id: number;\n  personaId: number;\n  institucion: string;\n  cargo: string;\n  inicio: string;        // YYYY-MM-DD\n  fin?: string|null;     // YYYY-MM-DD\n}\ninterface Certificacion {\n  id: number;\n  personaId: number;\n  nombre: string;\n  entidad: string;\n  emision: string;       // YYYY-MM-DD\n  vencimiento?: string|null; // YYYY-MM-DD\n}\ninterface Publicacion {\n  id: number;\n  personaId: number;\n  tipo: string;          // \"ARTICULO\"|\"LIBRO\"|\"CAPITULO\"|\"CONGRESO\" (libre en esta versión)\n  titulo: string;\n  anio: number;          // 1900..2100\n  revistaEditorial?: string|null;\n  doi?: string|null;\n}\n```\n**Endpoints:**\n- `/api/cv/educacion` (CRUD)\n- `/api/cv/experiencia` (CRUD)\n- `/api/cv/certificaciones` (CRUD)\n- `/api/publicaciones` (CRUD)\n\n---\n\n## 2) Especificación de endpoints (CRUD genérico)\nPara todos los recursos anteriores se sigue el mismo patrón:\n\n- **Listar**: `GET /api/<recurso>` → `200 OK` `[ {...}, ... ]`\n- **Obtener**: `GET /api/<recurso>/{id}` → `200 OK` `{...}` | `404 NotFound`\n- **Crear**: `POST /api/<recurso>` → body: objeto **sin `id`** → `201 Created` + Location header\n- **Actualizar**: `PUT /api/<recurso>/{id}` → body: objeto **con `id` = ruta** → `204 NoContent`\n- **Eliminar**: `DELETE /api/<recurso>/{id}` → `204 NoContent`\n\n**Códigos de error comunes**: `400 BadRequest`, `404 NotFound`, `500 Internal Server Error`.\n\n---\n\n## 3) Tipos TypeScript y validaciones (zod)\n\n### 3.1 Tipos y esquemas (extracto)\n```ts\nimport { z } from \"zod\";\n\nexport const zPersona = z.object({\n  id: z.number().int().nonnegative().optional(),\n  identificacion: z.string().min(8).max(20),\n  nombres: z.string().min(2).max(100),\n  apellidos: z.string().min(2).max(100),\n  emailInstitucional: z.string().email().optional().nullable(),\n  emailPersonal: z.string().email().optional().nullable(),\n});\nexport type Persona = z.infer<typeof zPersona>;\n\nexport const zContrato = z.object({\n  id: z.number().int().nonnegative().optional(),\n  personaId: z.number().int().positive(),\n  puestoId: z.number().int().positive(),\n  tipo: z.enum([\"TITULAR\",\"OCASIONAL\",\"CONTRATO\",\"SERV_PROF\"]),\n  fechaInicio: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/),\n  fechaFin: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/).optional().nullable(),\n  sueldoBase: z.number().min(0),\n});\nexport type Contrato = z.infer<typeof zContrato>;\n\n// Repite patrón para los demás modelos…\n```\n\n### 3.2 Helper HTTP\n```ts\nexport const API_BASE = import.meta.env.VITE_API_BASE ?? \"http://localhost:5000\";\nasync function api<T=any>(path: string, init?: RequestInit): Promise<T> {\n  const res = await fetch(`${API_BASE}${path}`, {\n    headers: { \"Content-Type\": \"application/json\" },\n    ...init,\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return res.status === 204 ? (null as any) : res.json();\n}\nexport const PersonasApi = {\n  list: () => api<Persona[]>(\"/api/personas\"),\n  get: (id:number) => api<Persona>(`/api/personas/${id}`),\n  create: (data:Persona) => api<Persona>(\"/api/personas\", { method:\"POST\", body: JSON.stringify(data) }),\n  update: (id:number, data:Persona) => api(`/api/personas/${id}`, { method:\"PUT\", body: JSON.stringify(data) }),\n  remove: (id:number) => api(`/api/personas/${id}`, { method:\"DELETE\" }),\n};\n```\n\n---\n\n## 4) Flujo UI sugerido\n\n1. **Dashboard:** métricas rápidas (conteo personas, contratos activos, marcaciones hoy).\n2. **Personas:** tabla + filtros, crear/editar (zod + react-hook-form), detalle con tabs:\n   - Contratos, Turnos, Asistencia (marcaciones por fecha), Permisos/Vacaciones/Recuperaciones, Nómina, CV, Publicaciones.\n3. **Turnos:** plan semanal (grid 7×N), ABM de asignaciones.\n4. **Permisos/Vacaciones:** formulario con vista de saldo (en esta versión saldo se calcula client-side o por reportes ad-hoc).\n5. **Nómina:** periodo, conceptos y movimientos (CRUD).\n\n---\n\n## 5) Ejemplos de payloads\n\n**Crear Persona**\n```http\nPOST /api/personas\nContent-Type: application/json\n\n{\n  \"identificacion\": \"1802890176\",\n  \"nombres\": \"Henry\",\n  \"apellidos\": \"Flores\",\n  \"emailInstitucional\": \"henry@uta.edu.ec\"\n}\n```\n\n**Crear Contrato**\n```http\nPOST /api/contratos\nContent-Type: application/json\n\n{\n  \"personaId\": 1,\n  \"puestoId\": 1,\n  \"tipo\": \"TITULAR\",\n  \"fechaInicio\": \"2025-01-01\",\n  \"sueldoBase\": 1200\n}\n```\n\n**Crear Permiso**\n```http\nPOST /api/permisos\nContent-Type: application/json\n\n{\n  \"personaId\": 1,\n  \"tipo\": \"MEDICO\",\n  \"desde\": \"2025-08-14T08:00:00Z\",\n  \"hasta\": \"2025-08-14T12:00:00Z\",\n  \"horas\": 4,\n  \"estado\": \"SOLICITADO\",\n  \"motivo\": \"Cita médica\"\n}\n```\n\n**Crear Publicación**\n```http\nPOST /api/publicaciones\nContent-Type: application/json\n\n{\n  \"personaId\": 1,\n  \"tipo\": \"ARTICULO\",\n  \"titulo\": \"Redes de alto rendimiento en campus\",\n  \"anio\": 2024,\n  \"doi\": \"10.1234/uta.2024.001\"\n}\n```\n\n---\n\n## 6) Variables de entorno (Frontend Vite)\n```\nVITE_API_BASE=http://localhost:5000\n```\n\n---\n\n## 7) Consideraciones adicionales\n- La API actual no implementa paginación/ordenamiento/filtrado server-side; hacerlo en cliente inicialmente.\n- Manejar errores de red/validación mostrando `toast`/mensajes claros.\n- Normalizar manejo de fechas (usar `dayjs` o `date-fns`).\n\n---\n\n## 8) Checklist para IA\n- [ ] Leer `VITE_API_BASE`.\n- [ ] Implementar `api()` con JSON y manejo de errores.\n- [ ] Tipos + Validación (zod) para **todas** las entidades listadas.\n- [ ] Páginas: Dashboard, Personas, Turnos, Asistencia, Permisos/Vacaciones, Nómina, Publicaciones.\n- [ ] Formularios con `react-hook-form` + `zodResolver`.\n- [ ] Tablas con `@tanstack/react-table`.\n- [ ] Rutas con `react-router-dom`.\n","size_bytes":11715},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createRoutes } from \"./routes\";\nimport { MemStorage } from \"./storage\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize storage\n  const storage = new MemStorage();\n  \n  // Set up routes\n  app.use(createRoutes(storage));\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  app.listen(port, '0.0.0.0', () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2123},"server/routes.ts":{"content":"import { Router, Request, Response, NextFunction } from \"express\";\nimport { z } from \"zod\";\nimport { IStorage } from \"./storage\";\nimport { \n  insertPersonSchema, insertEmployeeSchema, insertFacultySchema, insertDepartmentSchema, \n  insertScheduleSchema, insertContractSchema, insertPermissionTypeSchema, insertPermissionSchema, \n  insertVacationSchema, insertAttendancePunchSchema, insertPayrollSchema, insertPayrollLineSchema,\n  insertPublicationSchema, insertFamilyMemberSchema, insertWorkExperienceSchema, insertTrainingSchema,\n  insertBookSchema, insertEmergencyContactSchema, insertCatastrophicIllnessSchema, insertBankAccountSchema\n} from \"@shared/schema\";\n\ninterface ValidatedRequest extends Request {\n  validatedBody: any;\n}\n\nexport function createRoutes(storage: IStorage): Router {\n  const router = Router();\n\n  // Helper function for validation\n  const validateBody = (schema: z.ZodSchema) => (req: ValidatedRequest, res: Response, next: NextFunction) => {\n    try {\n      req.validatedBody = schema.parse(req.body);\n      next();\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"Validation failed\", details: error.errors });\n      }\n      return res.status(400).json({ error: \"Invalid request body\" });\n    }\n  };\n\n  // People Routes\n  router.get(\"/api/people\", async (req, res) => {\n    try {\n      const people = await storage.getPeople();\n      res.json(people);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch people\" });\n    }\n  });\n\n  router.get(\"/api/people/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) return res.status(400).json({ error: \"Invalid ID\" });\n      \n      const person = await storage.getPersonById(id);\n      if (!person) return res.status(404).json({ error: \"Person not found\" });\n      \n      res.json(person);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch person\" });\n    }\n  });\n\n  router.post(\"/api/people\", validateBody(insertPersonSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const person = await storage.createPerson(req.validatedBody);\n      res.status(201).json(person);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create person\" });\n    }\n  });\n\n  router.put(\"/api/people/:id\", validateBody(insertPersonSchema.partial()), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) return res.status(400).json({ error: \"Invalid ID\" });\n      \n      const person = await storage.updatePerson(id, req.validatedBody);\n      if (!person) return res.status(404).json({ error: \"Person not found\" });\n      \n      res.json(person);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update person\" });\n    }\n  });\n\n  router.delete(\"/api/people/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) return res.status(400).json({ error: \"Invalid ID\" });\n      \n      const deleted = await storage.deletePerson(id);\n      if (!deleted) return res.status(404).json({ error: \"Person not found\" });\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete person\" });\n    }\n  });\n\n  // Employees Routes\n  router.get(\"/api/employees\", async (req, res) => {\n    try {\n      const employees = await storage.getEmployees();\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch employees\" });\n    }\n  });\n\n  router.post(\"/api/employees\", validateBody(insertEmployeeSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const employee = await storage.createEmployee(req.validatedBody);\n      res.status(201).json(employee);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create employee\" });\n    }\n  });\n\n  // Faculties Routes\n  router.get(\"/api/faculties\", async (req, res) => {\n    try {\n      const faculties = await storage.getFaculties();\n      res.json(faculties);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch faculties\" });\n    }\n  });\n\n  router.post(\"/api/faculties\", validateBody(insertFacultySchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const faculty = await storage.createFaculty(req.validatedBody);\n      res.status(201).json(faculty);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create faculty\" });\n    }\n  });\n\n  // Departments Routes\n  router.get(\"/api/departments\", async (req, res) => {\n    try {\n      const departments = await storage.getDepartments();\n      res.json(departments);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch departments\" });\n    }\n  });\n\n  router.post(\"/api/departments\", validateBody(insertDepartmentSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const department = await storage.createDepartment(req.validatedBody);\n      res.status(201).json(department);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create department\" });\n    }\n  });\n\n  // Contracts Routes\n  router.get(\"/api/contracts\", async (req, res) => {\n    try {\n      const contracts = await storage.getContracts();\n      res.json(contracts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch contracts\" });\n    }\n  });\n\n  router.post(\"/api/contracts\", validateBody(insertContractSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const contract = await storage.createContract(req.validatedBody);\n      res.status(201).json(contract);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create contract\" });\n    }\n  });\n\n  // Permissions Routes\n  router.get(\"/api/permissions\", async (req, res) => {\n    try {\n      const permissions = await storage.getPermissions();\n      res.json(permissions);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch permissions\" });\n    }\n  });\n\n  router.post(\"/api/permissions\", validateBody(insertPermissionSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const permission = await storage.createPermission(req.validatedBody);\n      res.status(201).json(permission);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create permission\" });\n    }\n  });\n\n  // Vacations Routes\n  router.get(\"/api/vacations\", async (req, res) => {\n    try {\n      const vacations = await storage.getVacations();\n      res.json(vacations);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch vacations\" });\n    }\n  });\n\n  router.post(\"/api/vacations\", validateBody(insertVacationSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const vacation = await storage.createVacation(req.validatedBody);\n      res.status(201).json(vacation);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create vacation\" });\n    }\n  });\n\n  // Attendance Routes\n  router.get(\"/api/attendance/punches\", async (req, res) => {\n    try {\n      const punches = await storage.getAttendancePunches();\n      res.json(punches);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch attendance punches\" });\n    }\n  });\n\n  router.post(\"/api/attendance/punches\", validateBody(insertAttendancePunchSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const punch = await storage.createAttendancePunch(req.validatedBody);\n      res.status(201).json(punch);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create attendance punch\" });\n    }\n  });\n\n  // Payroll Routes\n  router.get(\"/api/payroll\", async (req, res) => {\n    try {\n      const payrolls = await storage.getPayrolls();\n      res.json(payrolls);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch payrolls\" });\n    }\n  });\n\n  router.post(\"/api/payroll\", validateBody(insertPayrollSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const payroll = await storage.createPayroll(req.validatedBody);\n      res.status(201).json(payroll);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create payroll\" });\n    }\n  });\n\n  // Publications Routes\n  router.get(\"/api/people/:personId/publications\", async (req, res) => {\n    try {\n      const personId = parseInt(req.params.personId);\n      if (isNaN(personId)) return res.status(400).json({ error: \"Invalid person ID\" });\n      \n      const publications = await storage.getPublicationsByPersonId(personId);\n      res.json(publications);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch publications\" });\n    }\n  });\n\n  router.post(\"/api/publications\", validateBody(insertPublicationSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const publication = await storage.createPublication(req.validatedBody);\n      res.status(201).json(publication);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create publication\" });\n    }\n  });\n\n  router.put(\"/api/publications/:id\", validateBody(insertPublicationSchema.partial()), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) return res.status(400).json({ error: \"Invalid ID\" });\n      \n      const publication = await storage.updatePublication(id, req.validatedBody);\n      if (!publication) return res.status(404).json({ error: \"Publication not found\" });\n      \n      res.json(publication);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update publication\" });\n    }\n  });\n\n  router.delete(\"/api/publications/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      if (isNaN(id)) return res.status(400).json({ error: \"Invalid ID\" });\n      \n      const deleted = await storage.deletePublication(id);\n      if (!deleted) return res.status(404).json({ error: \"Publication not found\" });\n      \n      res.json({ message: \"Publication deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete publication\" });\n    }\n  });\n\n  // Family Members Routes\n  router.get(\"/api/people/:personId/family\", async (req, res) => {\n    try {\n      const personId = parseInt(req.params.personId);\n      if (isNaN(personId)) return res.status(400).json({ error: \"Invalid person ID\" });\n      \n      const familyMembers = await storage.getFamilyMembersByPersonId(personId);\n      res.json(familyMembers);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch family members\" });\n    }\n  });\n\n  router.post(\"/api/family\", validateBody(insertFamilyMemberSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const familyMember = await storage.createFamilyMember(req.validatedBody);\n      res.status(201).json(familyMember);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create family member\" });\n    }\n  });\n\n  // Work Experiences Routes\n  router.get(\"/api/people/:personId/work-experience\", async (req, res) => {\n    try {\n      const personId = parseInt(req.params.personId);\n      if (isNaN(personId)) return res.status(400).json({ error: \"Invalid person ID\" });\n      \n      const workExperiences = await storage.getWorkExperiencesByPersonId(personId);\n      res.json(workExperiences);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch work experiences\" });\n    }\n  });\n\n  router.post(\"/api/work-experience\", validateBody(insertWorkExperienceSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const workExperience = await storage.createWorkExperience(req.validatedBody);\n      res.status(201).json(workExperience);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create work experience\" });\n    }\n  });\n\n  // Trainings Routes\n  router.get(\"/api/people/:personId/trainings\", async (req, res) => {\n    try {\n      const personId = parseInt(req.params.personId);\n      if (isNaN(personId)) return res.status(400).json({ error: \"Invalid person ID\" });\n      \n      const trainings = await storage.getTrainingsByPersonId(personId);\n      res.json(trainings);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch trainings\" });\n    }\n  });\n\n  router.post(\"/api/trainings\", validateBody(insertTrainingSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const training = await storage.createTraining(req.validatedBody);\n      res.status(201).json(training);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create training\" });\n    }\n  });\n\n  // Books Routes\n  router.get(\"/api/people/:personId/books\", async (req, res) => {\n    try {\n      const personId = parseInt(req.params.personId);\n      if (isNaN(personId)) return res.status(400).json({ error: \"Invalid person ID\" });\n      \n      const books = await storage.getBooksByPersonId(personId);\n      res.json(books);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch books\" });\n    }\n  });\n\n  router.post(\"/api/books\", validateBody(insertBookSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const book = await storage.createBook(req.validatedBody);\n      res.status(201).json(book);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create book\" });\n    }\n  });\n\n  // Emergency Contacts Routes\n  router.get(\"/api/people/:personId/emergency-contacts\", async (req, res) => {\n    try {\n      const personId = parseInt(req.params.personId);\n      if (isNaN(personId)) return res.status(400).json({ error: \"Invalid person ID\" });\n      \n      const emergencyContacts = await storage.getEmergencyContactsByPersonId(personId);\n      res.json(emergencyContacts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch emergency contacts\" });\n    }\n  });\n\n  router.post(\"/api/emergency-contacts\", validateBody(insertEmergencyContactSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const emergencyContact = await storage.createEmergencyContact(req.validatedBody);\n      res.status(201).json(emergencyContact);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create emergency contact\" });\n    }\n  });\n\n  // Catastrophic Illnesses Routes\n  router.get(\"/api/people/:personId/catastrophic-illnesses\", async (req, res) => {\n    try {\n      const personId = parseInt(req.params.personId);\n      if (isNaN(personId)) return res.status(400).json({ error: \"Invalid person ID\" });\n      \n      const catastrophicIllnesses = await storage.getCatastrophicIllnessesByPersonId(personId);\n      res.json(catastrophicIllnesses);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch catastrophic illnesses\" });\n    }\n  });\n\n  router.post(\"/api/catastrophic-illnesses\", validateBody(insertCatastrophicIllnessSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const catastrophicIllness = await storage.createCatastrophicIllness(req.validatedBody);\n      res.status(201).json(catastrophicIllness);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create catastrophic illness\" });\n    }\n  });\n\n  // Bank Accounts Routes\n  router.get(\"/api/people/:personId/bank-accounts\", async (req, res) => {\n    try {\n      const personId = parseInt(req.params.personId);\n      if (isNaN(personId)) return res.status(400).json({ error: \"Invalid person ID\" });\n      \n      const bankAccounts = await storage.getBankAccountsByPersonId(personId);\n      res.json(bankAccounts);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch bank accounts\" });\n    }\n  });\n\n  router.post(\"/api/bank-accounts\", validateBody(insertBankAccountSchema), async (req: ValidatedRequest, res: Response) => {\n    try {\n      const bankAccount = await storage.createBankAccount(req.validatedBody);\n      res.status(201).json(bankAccount);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create bank account\" });\n    }\n  });\n\n  return router;\n}","size_bytes":16139},"server/storage.ts":{"content":"import { \n  Person, Employee, Faculty, Department, Schedule, Contract, PermissionType, Permission, Vacation, AttendancePunch, Payroll, PayrollLine,\n  Publication, FamilyMember, WorkExperience, Training, Book, EmergencyContact, CatastrophicIllness, BankAccount,\n  InsertPerson, InsertEmployee, InsertFaculty, InsertDepartment, InsertSchedule, InsertContract, InsertPermissionType, InsertPermission, InsertVacation, InsertAttendancePunch, InsertPayroll, InsertPayrollLine,\n  InsertPublication, InsertFamilyMember, InsertWorkExperience, InsertTraining, InsertBook, InsertEmergencyContact, InsertCatastrophicIllness, InsertBankAccount\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // People\n  getPeople(): Promise<Person[]>;\n  getPersonById(id: number): Promise<Person | null>;\n  createPerson(person: InsertPerson): Promise<Person>;\n  updatePerson(id: number, person: Partial<InsertPerson>): Promise<Person | null>;\n  deletePerson(id: number): Promise<boolean>;\n\n  // Employees\n  getEmployees(): Promise<Employee[]>;\n  getEmployeeById(id: number): Promise<Employee | null>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: number, employee: Partial<InsertEmployee>): Promise<Employee | null>;\n  deleteEmployee(id: number): Promise<boolean>;\n\n  // Faculties\n  getFaculties(): Promise<Faculty[]>;\n  getFacultyById(id: number): Promise<Faculty | null>;\n  createFaculty(faculty: InsertFaculty): Promise<Faculty>;\n  updateFaculty(id: number, faculty: Partial<InsertFaculty>): Promise<Faculty | null>;\n  deleteFaculty(id: number): Promise<boolean>;\n\n  // Departments\n  getDepartments(): Promise<Department[]>;\n  getDepartmentById(id: number): Promise<Department | null>;\n  createDepartment(department: InsertDepartment): Promise<Department>;\n  updateDepartment(id: number, department: Partial<InsertDepartment>): Promise<Department | null>;\n  deleteDepartment(id: number): Promise<boolean>;\n\n  // Schedules\n  getSchedules(): Promise<Schedule[]>;\n  getScheduleById(id: number): Promise<Schedule | null>;\n  createSchedule(schedule: InsertSchedule): Promise<Schedule>;\n  updateSchedule(id: number, schedule: Partial<InsertSchedule>): Promise<Schedule | null>;\n  deleteSchedule(id: number): Promise<boolean>;\n\n  // Contracts\n  getContracts(): Promise<Contract[]>;\n  getContractById(id: number): Promise<Contract | null>;\n  createContract(contract: InsertContract): Promise<Contract>;\n  updateContract(id: number, contract: Partial<InsertContract>): Promise<Contract | null>;\n  deleteContract(id: number): Promise<boolean>;\n\n  // Permission Types\n  getPermissionTypes(): Promise<PermissionType[]>;\n  getPermissionTypeById(id: number): Promise<PermissionType | null>;\n  createPermissionType(permissionType: InsertPermissionType): Promise<PermissionType>;\n  updatePermissionType(id: number, permissionType: Partial<InsertPermissionType>): Promise<PermissionType | null>;\n  deletePermissionType(id: number): Promise<boolean>;\n\n  // Permissions\n  getPermissions(): Promise<Permission[]>;\n  getPermissionById(id: number): Promise<Permission | null>;\n  createPermission(permission: InsertPermission): Promise<Permission>;\n  updatePermission(id: number, permission: Partial<InsertPermission>): Promise<Permission | null>;\n  deletePermission(id: number): Promise<boolean>;\n\n  // Vacations\n  getVacations(): Promise<Vacation[]>;\n  getVacationById(id: number): Promise<Vacation | null>;\n  createVacation(vacation: InsertVacation): Promise<Vacation>;\n  updateVacation(id: number, vacation: Partial<InsertVacation>): Promise<Vacation | null>;\n  deleteVacation(id: number): Promise<boolean>;\n\n  // Attendance Punches\n  getAttendancePunches(): Promise<AttendancePunch[]>;\n  getAttendancePunchById(id: number): Promise<AttendancePunch | null>;\n  createAttendancePunch(punch: InsertAttendancePunch): Promise<AttendancePunch>;\n  updateAttendancePunch(id: number, punch: Partial<InsertAttendancePunch>): Promise<AttendancePunch | null>;\n  deleteAttendancePunch(id: number): Promise<boolean>;\n\n  // Payroll\n  getPayrolls(): Promise<Payroll[]>;\n  getPayrollById(id: number): Promise<Payroll | null>;\n  createPayroll(payroll: InsertPayroll): Promise<Payroll>;\n  updatePayroll(id: number, payroll: Partial<InsertPayroll>): Promise<Payroll | null>;\n  deletePayroll(id: number): Promise<boolean>;\n\n  // Payroll Lines\n  getPayrollLines(): Promise<PayrollLine[]>;\n  getPayrollLineById(id: number): Promise<PayrollLine | null>;\n  createPayrollLine(payrollLine: InsertPayrollLine): Promise<PayrollLine>;\n  updatePayrollLine(id: number, payrollLine: Partial<InsertPayrollLine>): Promise<PayrollLine | null>;\n  deletePayrollLine(id: number): Promise<boolean>;\n\n  // Publications\n  getPublicationsByPersonId(personId: number): Promise<Publication[]>;\n  createPublication(publication: InsertPublication): Promise<Publication>;\n  updatePublication(id: number, publication: Partial<InsertPublication>): Promise<Publication | null>;\n  deletePublication(id: number): Promise<boolean>;\n\n  // Family Members\n  getFamilyMembersByPersonId(personId: number): Promise<FamilyMember[]>;\n  createFamilyMember(familyMember: InsertFamilyMember): Promise<FamilyMember>;\n  updateFamilyMember(id: number, familyMember: Partial<InsertFamilyMember>): Promise<FamilyMember | null>;\n  deleteFamilyMember(id: number): Promise<boolean>;\n\n  // Work Experiences\n  getWorkExperiencesByPersonId(personId: number): Promise<WorkExperience[]>;\n  createWorkExperience(workExperience: InsertWorkExperience): Promise<WorkExperience>;\n  updateWorkExperience(id: number, workExperience: Partial<InsertWorkExperience>): Promise<WorkExperience | null>;\n  deleteWorkExperience(id: number): Promise<boolean>;\n\n  // Trainings\n  getTrainingsByPersonId(personId: number): Promise<Training[]>;\n  createTraining(training: InsertTraining): Promise<Training>;\n  updateTraining(id: number, training: Partial<InsertTraining>): Promise<Training | null>;\n  deleteTraining(id: number): Promise<boolean>;\n\n  // Books\n  getBooksByPersonId(personId: number): Promise<Book[]>;\n  createBook(book: InsertBook): Promise<Book>;\n  updateBook(id: number, book: Partial<InsertBook>): Promise<Book | null>;\n  deleteBook(id: number): Promise<boolean>;\n\n  // Emergency Contacts\n  getEmergencyContactsByPersonId(personId: number): Promise<EmergencyContact[]>;\n  createEmergencyContact(emergencyContact: InsertEmergencyContact): Promise<EmergencyContact>;\n  updateEmergencyContact(id: number, emergencyContact: Partial<InsertEmergencyContact>): Promise<EmergencyContact | null>;\n  deleteEmergencyContact(id: number): Promise<boolean>;\n\n  // Catastrophic Illnesses\n  getCatastrophicIllnessesByPersonId(personId: number): Promise<CatastrophicIllness[]>;\n  createCatastrophicIllness(catastrophicIllness: InsertCatastrophicIllness): Promise<CatastrophicIllness>;\n  updateCatastrophicIllness(id: number, catastrophicIllness: Partial<InsertCatastrophicIllness>): Promise<CatastrophicIllness | null>;\n  deleteCatastrophicIllness(id: number): Promise<boolean>;\n\n  // Bank Accounts\n  getBankAccountsByPersonId(personId: number): Promise<BankAccount[]>;\n  createBankAccount(bankAccount: InsertBankAccount): Promise<BankAccount>;\n  updateBankAccount(id: number, bankAccount: Partial<InsertBankAccount>): Promise<BankAccount | null>;\n  deleteBankAccount(id: number): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private people: Person[] = [];\n  private employees: Employee[] = [];\n  private faculties: Faculty[] = [];\n  private departments: Department[] = [];\n  private schedules: Schedule[] = [];\n  private contracts: Contract[] = [];\n  private permissionTypes: PermissionType[] = [];\n  private permissions: Permission[] = [];\n  private vacations: Vacation[] = [];\n  private attendancePunches: AttendancePunch[] = [];\n  private payrolls: Payroll[] = [];\n  private payrollLines: PayrollLine[] = [];\n  private publications: Publication[] = [];\n  private familyMembers: FamilyMember[] = [];\n  private workExperiences: WorkExperience[] = [];\n  private trainings: Training[] = [];\n  private books: Book[] = [];\n  private emergencyContacts: EmergencyContact[] = [];\n  private catastrophicIllnesses: CatastrophicIllness[] = [];\n  private bankAccounts: BankAccount[] = [];\n  \n  private nextId = 1;\n  private getNextId() { return this.nextId++; }\n\n  constructor() {\n    this.seedData();\n  }\n\n  private seedData() {\n    // Sample People\n    this.people = [\n      { id: 1, firstName: \"Henry\", lastName: \"Flores\", idCard: \"1802890176\", email: \"henry.flores@uta.edu.ec\", phone: \"0999999999\", birthDate: \"1985-06-15\", sex: \"M\", isActive: true, gender: \"Masculino\", disability: null, address: \"Ambato, Ecuador\" },\n      { id: 2, firstName: \"Ana\", lastName: \"Vega\", idCard: \"1720012345\", email: \"ana.vega@uta.edu.ec\", phone: \"0988888888\", birthDate: \"1990-03-22\", sex: \"F\", isActive: true, gender: \"Femenino\", disability: null, address: \"Quito, Ecuador\" },\n      { id: 3, firstName: \"Carlos\", lastName: \"Mendoza\", idCard: \"1713456789\", email: \"carlos.mendoza@uta.edu.ec\", phone: \"0977777777\", birthDate: \"1982-11-08\", sex: \"M\", isActive: true, gender: \"Masculino\", disability: null, address: \"Guayaquil, Ecuador\" },\n    ];\n\n    // Sample Employees\n    this.employees = [\n      { id: 1, type: \"Administrative_LOSEP\", departmentId: 1, immediateBossId: null, hireDate: \"2020-01-15\", isActive: true },\n      { id: 2, type: \"Teacher_LOSE\", departmentId: 1, immediateBossId: 1, hireDate: \"2021-03-10\", isActive: true },\n      { id: 3, type: \"Employee_CT\", departmentId: 2, immediateBossId: 1, hireDate: \"2022-08-20\", isActive: true },\n    ];\n\n    // Sample Faculties\n    this.faculties = [\n      { id: 1, name: \"Facultad de Ingeniería Civil y Mecánica\", deanEmployeeId: 1, isActive: true },\n      { id: 2, name: \"Facultad de Ciencias Humanas y de la Educación\", deanEmployeeId: 2, isActive: true },\n    ];\n\n    // Sample Departments\n    this.departments = [\n      { id: 1, facultyId: 1, name: \"Departamento de Ingeniería Civil\", isActive: true },\n      { id: 2, facultyId: 2, name: \"Departamento de Psicología\", isActive: true },\n    ];\n\n    // Sample Contracts\n    this.contracts = [\n      { id: 1, employeeId: 1, contractType: \"Indefinido\", startDate: \"2020-01-15\", endDate: null, baseSalary: \"1350.00\" },\n      { id: 2, employeeId: 2, contractType: \"Ocasional\", startDate: \"2021-03-10\", endDate: \"2024-03-10\", baseSalary: \"1200.00\" },\n      { id: 3, employeeId: 3, contractType: \"Contrato\", startDate: \"2022-08-20\", endDate: \"2025-08-20\", baseSalary: \"900.00\" },\n    ];\n\n    // Sample Permission Types\n    this.permissionTypes = [\n      { id: 1, name: \"Permiso Personal\", deductsFromVacation: false, requiresApproval: true, maxDays: 3 },\n      { id: 2, name: \"Permiso Médico\", deductsFromVacation: false, requiresApproval: true, maxDays: 15 },\n      { id: 3, name: \"Permiso por Matrimonio\", deductsFromVacation: false, requiresApproval: true, maxDays: 5 },\n    ];\n\n    // Sample Permissions\n    this.permissions = [\n      { id: 1, employeeId: 1, permissionTypeId: 1, startDate: \"2025-08-20\", endDate: \"2025-08-20\", chargedToVacation: false, approvedBy: null, justification: \"Trámite personal\", requestDate: new Date(\"2025-08-14T09:20:00Z\").toISOString(), status: \"Pending\", vacationId: null },\n      { id: 2, employeeId: 2, permissionTypeId: 2, startDate: \"2025-08-15\", endDate: \"2025-08-16\", chargedToVacation: false, approvedBy: 1, justification: \"Cita médica\", requestDate: new Date(\"2025-08-10T08:00:00Z\").toISOString(), status: \"Approved\", vacationId: null },\n    ];\n\n    // Sample Attendance Punches\n    this.attendancePunches = [\n      { id: 1, employeeId: 1, punchTime: new Date(\"2025-08-14T08:00:00Z\").toISOString(), punchType: \"In\", deviceId: \"WEB\", longitude: null, latitude: null },\n      { id: 2, employeeId: 1, punchTime: new Date(\"2025-08-14T17:00:00Z\").toISOString(), punchType: \"Out\", deviceId: \"WEB\", longitude: null, latitude: null },\n      { id: 3, employeeId: 2, punchTime: new Date(\"2025-08-14T08:15:00Z\").toISOString(), punchType: \"In\", deviceId: \"WEB\", longitude: null, latitude: null },\n    ];\n\n    // Sample Payroll\n    this.payrolls = [\n      { id: 1, employeeId: 1, period: \"2025-08\", baseSalary: \"1350.00\", status: \"Pending\", paymentDate: null, bankAccount: null },\n      { id: 2, employeeId: 2, period: \"2025-08\", baseSalary: \"1200.00\", status: \"Paid\", paymentDate: \"2025-08-30\", bankAccount: \"1234567890\" },\n    ];\n\n    this.nextId = 10;\n  }\n\n  // People Methods\n  async getPeople(): Promise<Person[]> { return [...this.people]; }\n  async getPersonById(id: number): Promise<Person | null> { return this.people.find(p => p.id === id) || null; }\n  async createPerson(person: InsertPerson): Promise<Person> {\n    const newPerson: Person = { ...person, id: this.getNextId() };\n    this.people.push(newPerson);\n    return newPerson;\n  }\n  async updatePerson(id: number, person: Partial<InsertPerson>): Promise<Person | null> {\n    const index = this.people.findIndex(p => p.id === id);\n    if (index === -1) return null;\n    this.people[index] = { ...this.people[index], ...person };\n    return this.people[index];\n  }\n  async deletePerson(id: number): Promise<boolean> {\n    const index = this.people.findIndex(p => p.id === id);\n    if (index === -1) return false;\n    this.people.splice(index, 1);\n    return true;\n  }\n\n  // Employees Methods\n  async getEmployees(): Promise<Employee[]> { return [...this.employees]; }\n  async getEmployeeById(id: number): Promise<Employee | null> { return this.employees.find(e => e.id === id) || null; }\n  async createEmployee(employee: InsertEmployee): Promise<Employee> {\n    const newEmployee: Employee = { ...employee };\n    this.employees.push(newEmployee);\n    return newEmployee;\n  }\n  async updateEmployee(id: number, employee: Partial<InsertEmployee>): Promise<Employee | null> {\n    const index = this.employees.findIndex(e => e.id === id);\n    if (index === -1) return null;\n    this.employees[index] = { ...this.employees[index], ...employee };\n    return this.employees[index];\n  }\n  async deleteEmployee(id: number): Promise<boolean> {\n    const index = this.employees.findIndex(e => e.id === id);\n    if (index === -1) return false;\n    this.employees.splice(index, 1);\n    return true;\n  }\n\n  // Faculties Methods\n  async getFaculties(): Promise<Faculty[]> { return [...this.faculties]; }\n  async getFacultyById(id: number): Promise<Faculty | null> { return this.faculties.find(f => f.id === id) || null; }\n  async createFaculty(faculty: InsertFaculty): Promise<Faculty> {\n    const newFaculty: Faculty = { ...faculty, id: this.getNextId() };\n    this.faculties.push(newFaculty);\n    return newFaculty;\n  }\n  async updateFaculty(id: number, faculty: Partial<InsertFaculty>): Promise<Faculty | null> {\n    const index = this.faculties.findIndex(f => f.id === id);\n    if (index === -1) return null;\n    this.faculties[index] = { ...this.faculties[index], ...faculty };\n    return this.faculties[index];\n  }\n  async deleteFaculty(id: number): Promise<boolean> {\n    const index = this.faculties.findIndex(f => f.id === id);\n    if (index === -1) return false;\n    this.faculties.splice(index, 1);\n    return true;\n  }\n\n  // Departments Methods\n  async getDepartments(): Promise<Department[]> { return [...this.departments]; }\n  async getDepartmentById(id: number): Promise<Department | null> { return this.departments.find(d => d.id === id) || null; }\n  async createDepartment(department: InsertDepartment): Promise<Department> {\n    const newDepartment: Department = { ...department, id: this.getNextId() };\n    this.departments.push(newDepartment);\n    return newDepartment;\n  }\n  async updateDepartment(id: number, department: Partial<InsertDepartment>): Promise<Department | null> {\n    const index = this.departments.findIndex(d => d.id === id);\n    if (index === -1) return null;\n    this.departments[index] = { ...this.departments[index], ...department };\n    return this.departments[index];\n  }\n  async deleteDepartment(id: number): Promise<boolean> {\n    const index = this.departments.findIndex(d => d.id === id);\n    if (index === -1) return false;\n    this.departments.splice(index, 1);\n    return true;\n  }\n\n  // Schedules Methods\n  async getSchedules(): Promise<Schedule[]> { return [...this.schedules]; }\n  async getScheduleById(id: number): Promise<Schedule | null> { return this.schedules.find(s => s.id === id) || null; }\n  async createSchedule(schedule: InsertSchedule): Promise<Schedule> {\n    const newSchedule: Schedule = { ...schedule, id: this.getNextId() };\n    this.schedules.push(newSchedule);\n    return newSchedule;\n  }\n  async updateSchedule(id: number, schedule: Partial<InsertSchedule>): Promise<Schedule | null> {\n    const index = this.schedules.findIndex(s => s.id === id);\n    if (index === -1) return null;\n    this.schedules[index] = { ...this.schedules[index], ...schedule };\n    return this.schedules[index];\n  }\n  async deleteSchedule(id: number): Promise<boolean> {\n    const index = this.schedules.findIndex(s => s.id === id);\n    if (index === -1) return false;\n    this.schedules.splice(index, 1);\n    return true;\n  }\n\n  // Contracts Methods\n  async getContracts(): Promise<Contract[]> { return [...this.contracts]; }\n  async getContractById(id: number): Promise<Contract | null> { return this.contracts.find(c => c.id === id) || null; }\n  async createContract(contract: InsertContract): Promise<Contract> {\n    const newContract: Contract = { ...contract, id: this.getNextId() };\n    this.contracts.push(newContract);\n    return newContract;\n  }\n  async updateContract(id: number, contract: Partial<InsertContract>): Promise<Contract | null> {\n    const index = this.contracts.findIndex(c => c.id === id);\n    if (index === -1) return null;\n    this.contracts[index] = { ...this.contracts[index], ...contract };\n    return this.contracts[index];\n  }\n  async deleteContract(id: number): Promise<boolean> {\n    const index = this.contracts.findIndex(c => c.id === id);\n    if (index === -1) return false;\n    this.contracts.splice(index, 1);\n    return true;\n  }\n\n  // Permission Types Methods\n  async getPermissionTypes(): Promise<PermissionType[]> { return [...this.permissionTypes]; }\n  async getPermissionTypeById(id: number): Promise<PermissionType | null> { return this.permissionTypes.find(pt => pt.id === id) || null; }\n  async createPermissionType(permissionType: InsertPermissionType): Promise<PermissionType> {\n    const newPermissionType: PermissionType = { ...permissionType, id: this.getNextId() };\n    this.permissionTypes.push(newPermissionType);\n    return newPermissionType;\n  }\n  async updatePermissionType(id: number, permissionType: Partial<InsertPermissionType>): Promise<PermissionType | null> {\n    const index = this.permissionTypes.findIndex(pt => pt.id === id);\n    if (index === -1) return null;\n    this.permissionTypes[index] = { ...this.permissionTypes[index], ...permissionType };\n    return this.permissionTypes[index];\n  }\n  async deletePermissionType(id: number): Promise<boolean> {\n    const index = this.permissionTypes.findIndex(pt => pt.id === id);\n    if (index === -1) return false;\n    this.permissionTypes.splice(index, 1);\n    return true;\n  }\n\n  // Permissions Methods\n  async getPermissions(): Promise<Permission[]> { return [...this.permissions]; }\n  async getPermissionById(id: number): Promise<Permission | null> { return this.permissions.find(p => p.id === id) || null; }\n  async createPermission(permission: InsertPermission): Promise<Permission> {\n    const newPermission: Permission = { ...permission, id: this.getNextId(), requestDate: new Date().toISOString() };\n    this.permissions.push(newPermission);\n    return newPermission;\n  }\n  async updatePermission(id: number, permission: Partial<InsertPermission>): Promise<Permission | null> {\n    const index = this.permissions.findIndex(p => p.id === id);\n    if (index === -1) return null;\n    this.permissions[index] = { ...this.permissions[index], ...permission };\n    return this.permissions[index];\n  }\n  async deletePermission(id: number): Promise<boolean> {\n    const index = this.permissions.findIndex(p => p.id === id);\n    if (index === -1) return false;\n    this.permissions.splice(index, 1);\n    return true;\n  }\n\n  // Vacations Methods\n  async getVacations(): Promise<Vacation[]> { return [...this.vacations]; }\n  async getVacationById(id: number): Promise<Vacation | null> { return this.vacations.find(v => v.id === id) || null; }\n  async createVacation(vacation: InsertVacation): Promise<Vacation> {\n    const newVacation: Vacation = { ...vacation, id: this.getNextId() };\n    this.vacations.push(newVacation);\n    return newVacation;\n  }\n  async updateVacation(id: number, vacation: Partial<InsertVacation>): Promise<Vacation | null> {\n    const index = this.vacations.findIndex(v => v.id === id);\n    if (index === -1) return null;\n    this.vacations[index] = { ...this.vacations[index], ...vacation };\n    return this.vacations[index];\n  }\n  async deleteVacation(id: number): Promise<boolean> {\n    const index = this.vacations.findIndex(v => v.id === id);\n    if (index === -1) return false;\n    this.vacations.splice(index, 1);\n    return true;\n  }\n\n  // Attendance Punches Methods\n  async getAttendancePunches(): Promise<AttendancePunch[]> { return [...this.attendancePunches]; }\n  async getAttendancePunchById(id: number): Promise<AttendancePunch | null> { return this.attendancePunches.find(ap => ap.id === id) || null; }\n  async createAttendancePunch(punch: InsertAttendancePunch): Promise<AttendancePunch> {\n    const newPunch: AttendancePunch = { ...punch, id: this.getNextId() };\n    this.attendancePunches.push(newPunch);\n    return newPunch;\n  }\n  async updateAttendancePunch(id: number, punch: Partial<InsertAttendancePunch>): Promise<AttendancePunch | null> {\n    const index = this.attendancePunches.findIndex(ap => ap.id === id);\n    if (index === -1) return null;\n    this.attendancePunches[index] = { ...this.attendancePunches[index], ...punch };\n    return this.attendancePunches[index];\n  }\n  async deleteAttendancePunch(id: number): Promise<boolean> {\n    const index = this.attendancePunches.findIndex(ap => ap.id === id);\n    if (index === -1) return false;\n    this.attendancePunches.splice(index, 1);\n    return true;\n  }\n\n  // Payroll Methods\n  async getPayrolls(): Promise<Payroll[]> { return [...this.payrolls]; }\n  async getPayrollById(id: number): Promise<Payroll | null> { return this.payrolls.find(p => p.id === id) || null; }\n  async createPayroll(payroll: InsertPayroll): Promise<Payroll> {\n    const newPayroll: Payroll = { ...payroll, id: this.getNextId() };\n    this.payrolls.push(newPayroll);\n    return newPayroll;\n  }\n  async updatePayroll(id: number, payroll: Partial<InsertPayroll>): Promise<Payroll | null> {\n    const index = this.payrolls.findIndex(p => p.id === id);\n    if (index === -1) return null;\n    this.payrolls[index] = { ...this.payrolls[index], ...payroll };\n    return this.payrolls[index];\n  }\n  async deletePayroll(id: number): Promise<boolean> {\n    const index = this.payrolls.findIndex(p => p.id === id);\n    if (index === -1) return false;\n    this.payrolls.splice(index, 1);\n    return true;\n  }\n\n  // Payroll Lines Methods\n  async getPayrollLines(): Promise<PayrollLine[]> { return [...this.payrollLines]; }\n  async getPayrollLineById(id: number): Promise<PayrollLine | null> { return this.payrollLines.find(pl => pl.id === id) || null; }\n  async createPayrollLine(payrollLine: InsertPayrollLine): Promise<PayrollLine> {\n    const newPayrollLine: PayrollLine = { ...payrollLine, id: this.getNextId() };\n    this.payrollLines.push(newPayrollLine);\n    return newPayrollLine;\n  }\n  async updatePayrollLine(id: number, payrollLine: Partial<InsertPayrollLine>): Promise<PayrollLine | null> {\n    const index = this.payrollLines.findIndex(pl => pl.id === id);\n    if (index === -1) return null;\n    this.payrollLines[index] = { ...this.payrollLines[index], ...payrollLine };\n    return this.payrollLines[index];\n  }\n  async deletePayrollLine(id: number): Promise<boolean> {\n    const index = this.payrollLines.findIndex(pl => pl.id === id);\n    if (index === -1) return false;\n    this.payrollLines.splice(index, 1);\n    return true;\n  }\n\n  // Publications methods\n  async getPublicationsByPersonId(personId: number): Promise<Publication[]> {\n    return this.publications.filter(p => p.personId === personId);\n  }\n\n  async createPublication(publication: InsertPublication): Promise<Publication> {\n    const newPublication: Publication = { ...publication, id: this.getNextId() };\n    this.publications.push(newPublication);\n    return newPublication;\n  }\n\n  async updatePublication(id: number, publication: Partial<InsertPublication>): Promise<Publication | null> {\n    const index = this.publications.findIndex(p => p.id === id);\n    if (index === -1) return null;\n    this.publications[index] = { ...this.publications[index], ...publication };\n    return this.publications[index];\n  }\n\n  async deletePublication(id: number): Promise<boolean> {\n    const index = this.publications.findIndex(p => p.id === id);\n    if (index === -1) return false;\n    this.publications.splice(index, 1);\n    return true;\n  }\n\n  // Family Members methods\n  async getFamilyMembersByPersonId(personId: number): Promise<FamilyMember[]> {\n    return this.familyMembers.filter(fm => fm.personId === personId);\n  }\n\n  async createFamilyMember(familyMember: InsertFamilyMember): Promise<FamilyMember> {\n    const newFamilyMember: FamilyMember = { ...familyMember, id: this.getNextId() };\n    this.familyMembers.push(newFamilyMember);\n    return newFamilyMember;\n  }\n\n  async updateFamilyMember(id: number, familyMember: Partial<InsertFamilyMember>): Promise<FamilyMember | null> {\n    const index = this.familyMembers.findIndex(fm => fm.id === id);\n    if (index === -1) return null;\n    this.familyMembers[index] = { ...this.familyMembers[index], ...familyMember };\n    return this.familyMembers[index];\n  }\n\n  async deleteFamilyMember(id: number): Promise<boolean> {\n    const index = this.familyMembers.findIndex(fm => fm.id === id);\n    if (index === -1) return false;\n    this.familyMembers.splice(index, 1);\n    return true;\n  }\n\n  // Work Experiences methods\n  async getWorkExperiencesByPersonId(personId: number): Promise<WorkExperience[]> {\n    return this.workExperiences.filter(we => we.personId === personId);\n  }\n\n  async createWorkExperience(workExperience: InsertWorkExperience): Promise<WorkExperience> {\n    const newWorkExperience: WorkExperience = { ...workExperience, id: this.getNextId() };\n    this.workExperiences.push(newWorkExperience);\n    return newWorkExperience;\n  }\n\n  async updateWorkExperience(id: number, workExperience: Partial<InsertWorkExperience>): Promise<WorkExperience | null> {\n    const index = this.workExperiences.findIndex(we => we.id === id);\n    if (index === -1) return null;\n    this.workExperiences[index] = { ...this.workExperiences[index], ...workExperience };\n    return this.workExperiences[index];\n  }\n\n  async deleteWorkExperience(id: number): Promise<boolean> {\n    const index = this.workExperiences.findIndex(we => we.id === id);\n    if (index === -1) return false;\n    this.workExperiences.splice(index, 1);\n    return true;\n  }\n\n  // Trainings methods\n  async getTrainingsByPersonId(personId: number): Promise<Training[]> {\n    return this.trainings.filter(t => t.personId === personId);\n  }\n\n  async createTraining(training: InsertTraining): Promise<Training> {\n    const newTraining: Training = { ...training, id: this.getNextId() };\n    this.trainings.push(newTraining);\n    return newTraining;\n  }\n\n  async updateTraining(id: number, training: Partial<InsertTraining>): Promise<Training | null> {\n    const index = this.trainings.findIndex(t => t.id === id);\n    if (index === -1) return null;\n    this.trainings[index] = { ...this.trainings[index], ...training };\n    return this.trainings[index];\n  }\n\n  async deleteTraining(id: number): Promise<boolean> {\n    const index = this.trainings.findIndex(t => t.id === id);\n    if (index === -1) return false;\n    this.trainings.splice(index, 1);\n    return true;\n  }\n\n  // Books methods\n  async getBooksByPersonId(personId: number): Promise<Book[]> {\n    return this.books.filter(b => b.personId === personId);\n  }\n\n  async createBook(book: InsertBook): Promise<Book> {\n    const newBook: Book = { ...book, id: this.getNextId() };\n    this.books.push(newBook);\n    return newBook;\n  }\n\n  async updateBook(id: number, book: Partial<InsertBook>): Promise<Book | null> {\n    const index = this.books.findIndex(b => b.id === id);\n    if (index === -1) return null;\n    this.books[index] = { ...this.books[index], ...book };\n    return this.books[index];\n  }\n\n  async deleteBook(id: number): Promise<boolean> {\n    const index = this.books.findIndex(b => b.id === id);\n    if (index === -1) return false;\n    this.books.splice(index, 1);\n    return true;\n  }\n\n  // Emergency Contacts methods\n  async getEmergencyContactsByPersonId(personId: number): Promise<EmergencyContact[]> {\n    return this.emergencyContacts.filter(ec => ec.personId === personId);\n  }\n\n  async createEmergencyContact(emergencyContact: InsertEmergencyContact): Promise<EmergencyContact> {\n    const newEmergencyContact: EmergencyContact = { ...emergencyContact, id: this.getNextId() };\n    this.emergencyContacts.push(newEmergencyContact);\n    return newEmergencyContact;\n  }\n\n  async updateEmergencyContact(id: number, emergencyContact: Partial<InsertEmergencyContact>): Promise<EmergencyContact | null> {\n    const index = this.emergencyContacts.findIndex(ec => ec.id === id);\n    if (index === -1) return null;\n    this.emergencyContacts[index] = { ...this.emergencyContacts[index], ...emergencyContact };\n    return this.emergencyContacts[index];\n  }\n\n  async deleteEmergencyContact(id: number): Promise<boolean> {\n    const index = this.emergencyContacts.findIndex(ec => ec.id === id);\n    if (index === -1) return false;\n    this.emergencyContacts.splice(index, 1);\n    return true;\n  }\n\n  // Catastrophic Illnesses methods\n  async getCatastrophicIllnessesByPersonId(personId: number): Promise<CatastrophicIllness[]> {\n    return this.catastrophicIllnesses.filter(ci => ci.personId === personId);\n  }\n\n  async createCatastrophicIllness(catastrophicIllness: InsertCatastrophicIllness): Promise<CatastrophicIllness> {\n    const newCatastrophicIllness: CatastrophicIllness = { ...catastrophicIllness, id: this.getNextId() };\n    this.catastrophicIllnesses.push(newCatastrophicIllness);\n    return newCatastrophicIllness;\n  }\n\n  async updateCatastrophicIllness(id: number, catastrophicIllness: Partial<InsertCatastrophicIllness>): Promise<CatastrophicIllness | null> {\n    const index = this.catastrophicIllnesses.findIndex(ci => ci.id === id);\n    if (index === -1) return null;\n    this.catastrophicIllnesses[index] = { ...this.catastrophicIllnesses[index], ...catastrophicIllness };\n    return this.catastrophicIllnesses[index];\n  }\n\n  async deleteCatastrophicIllness(id: number): Promise<boolean> {\n    const index = this.catastrophicIllnesses.findIndex(ci => ci.id === id);\n    if (index === -1) return false;\n    this.catastrophicIllnesses.splice(index, 1);\n    return true;\n  }\n\n  // Bank Accounts methods\n  async getBankAccountsByPersonId(personId: number): Promise<BankAccount[]> {\n    return this.bankAccounts.filter(ba => ba.personId === personId);\n  }\n\n  async createBankAccount(bankAccount: InsertBankAccount): Promise<BankAccount> {\n    const newBankAccount: BankAccount = { ...bankAccount, id: this.getNextId() };\n    this.bankAccounts.push(newBankAccount);\n    return newBankAccount;\n  }\n\n  async updateBankAccount(id: number, bankAccount: Partial<InsertBankAccount>): Promise<BankAccount | null> {\n    const index = this.bankAccounts.findIndex(ba => ba.id === id);\n    if (index === -1) return null;\n    this.bankAccounts[index] = { ...this.bankAccounts[index], ...bankAccount };\n    return this.bankAccounts[index];\n  }\n\n  async deleteBankAccount(id: number): Promise<boolean> {\n    const index = this.bankAccounts.findIndex(ba => ba.id === id);\n    if (index === -1) return false;\n    this.bankAccounts.splice(index, 1);\n    return true;\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":32197},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, date, boolean, bigint, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Tipos según nueva especificación\nexport const EmpType = [\"Teacher_LOSE\", \"Administrative_LOSEP\", \"Employee_CT\", \"Coordinator\"] as const;\nexport const SexType = [\"M\", \"F\", \"O\"] as const;\nexport const PermissionStatus = [\"Pending\", \"Approved\", \"Rejected\"] as const;\nexport const VacationStatus = [\"Planned\", \"InProgress\", \"Completed\", \"Canceled\"] as const;\nexport const PunchType = [\"In\", \"Out\"] as const;\nexport const CalcStatus = [\"Pending\", \"Approved\"] as const;\nexport const OTStatus = [\"Planned\", \"Verified\", \"Rejected\", \"Paid\"] as const;\nexport const MovementType = [\"Transfer\", \"Promotion\", \"Demotion\", \"Lateral\"] as const;\nexport const PayrollStatus = [\"Pending\", \"Paid\", \"Reconciled\"] as const;\nexport const LineType = [\"Earning\", \"Deduction\", \"Subsidy\", \"Overtime\"] as const;\n\n// 1. Personas\nexport const people = pgTable(\"people\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  idCard: varchar(\"id_card\", { length: 20 }).notNull().unique(),\n  email: varchar(\"email\", { length: 150 }).notNull().unique(),\n  phone: varchar(\"phone\", { length: 30 }),\n  birthDate: date(\"birth_date\"),\n  sex: varchar(\"sex\", { length: 1 }), // 'M'|'F'|'O'\n  gender: varchar(\"gender\", { length: 50 }),\n  disability: text(\"disability\"),\n  address: text(\"address\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\n// 2. Empleados\nexport const employees = pgTable(\"employees\", {\n  id: integer(\"id\").primaryKey().references(() => people.id), // PersonID\n  type: varchar(\"type\", { length: 30 }).notNull(), // EmpType\n  departmentId: integer(\"department_id\"),\n  immediateBossId: integer(\"immediate_boss_id\"),\n  hireDate: date(\"hire_date\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\n// 3. Facultades\nexport const faculties = pgTable(\"faculties\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  name: varchar(\"name\", { length: 120 }).notNull(),\n  deanEmployeeId: integer(\"dean_employee_id\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\n// 4. Departamentos\nexport const departments = pgTable(\"departments\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  facultyId: integer(\"faculty_id\").references(() => faculties.id),\n  name: varchar(\"name\", { length: 120 }).notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\n// 5. Horarios\nexport const schedules = pgTable(\"schedules\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  description: text(\"description\").notNull(),\n  entryTime: varchar(\"entry_time\", { length: 8 }).notNull(), // HH:mm:ss\n  exitTime: varchar(\"exit_time\", { length: 8 }).notNull(),\n  workingDays: text(\"working_days\").notNull(), // \"1,2,3,4,5\"\n  requiredHoursPerDay: decimal(\"required_hours_per_day\", { precision: 5, scale: 2 }).notNull(),\n  hasLunchBreak: boolean(\"has_lunch_break\").default(true).notNull(),\n  lunchStart: varchar(\"lunch_start\", { length: 8 }),\n  lunchEnd: varchar(\"lunch_end\", { length: 8 }),\n  isRotating: boolean(\"is_rotating\").default(false).notNull(),\n  rotationPattern: text(\"rotation_pattern\"),\n});\n\n// 6. Asignación de Horarios\nexport const employeeSchedules = pgTable(\"employee_schedules\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  scheduleId: integer(\"schedule_id\").references(() => schedules.id).notNull(),\n  validFrom: date(\"valid_from\").notNull(),\n  validTo: date(\"valid_to\"),\n});\n\n// 7. Contratos\nexport const contracts = pgTable(\"contracts\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  contractType: varchar(\"contract_type\", { length: 50 }).notNull(),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"),\n  baseSalary: decimal(\"base_salary\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// 8. Historial de Salarios\nexport const salaryHistory = pgTable(\"salary_history\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  contractId: integer(\"contract_id\").references(() => contracts.id).notNull(),\n  oldSalary: decimal(\"old_salary\", { precision: 10, scale: 2 }).notNull(),\n  newSalary: decimal(\"new_salary\", { precision: 10, scale: 2 }).notNull(),\n  changedBy: varchar(\"changed_by\", { length: 100 }).notNull(),\n  changedAt: timestamp(\"changed_at\").defaultNow().notNull(),\n  reason: text(\"reason\"),\n});\n\n// 9. Tipos de Permiso\nexport const permissionTypes = pgTable(\"permission_types\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  deductsFromVacation: boolean(\"deducts_from_vacation\").default(false).notNull(),\n  requiresApproval: boolean(\"requires_approval\").default(true).notNull(),\n  maxDays: integer(\"max_days\"),\n});\n\n// 10. Permisos\nexport const permissions = pgTable(\"permissions\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  permissionTypeId: integer(\"permission_type_id\").references(() => permissionTypes.id).notNull(),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  chargedToVacation: boolean(\"charged_to_vacation\").default(false).notNull(),\n  approvedBy: integer(\"approved_by\"),\n  justification: text(\"justification\"),\n  requestDate: timestamp(\"request_date\").defaultNow().notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"Pending\").notNull(),\n  vacationId: integer(\"vacation_id\"),\n});\n\n// 11. Vacaciones\nexport const vacations = pgTable(\"vacations\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  daysGranted: integer(\"days_granted\").notNull(),\n  daysTaken: integer(\"days_taken\").default(0).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"Planned\").notNull(),\n});\n\n// 12. Picadas (Asistencia)\nexport const attendancePunches = pgTable(\"attendance_punches\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  punchTime: timestamp(\"punch_time\").notNull(),\n  punchType: varchar(\"punch_type\", { length: 3 }).notNull(), // 'In'|'Out'\n  deviceId: varchar(\"device_id\", { length: 50 }),\n  longitude: real(\"longitude\"),\n  latitude: real(\"latitude\"),\n});\n\n// 13. Justificación de Picadas\nexport const punchJustifications = pgTable(\"punch_justifications\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  punchId: integer(\"punch_id\").references(() => attendancePunches.id).notNull(),\n  bossEmployeeId: integer(\"boss_employee_id\").references(() => employees.id).notNull(),\n  reason: text(\"reason\").notNull(),\n  approved: boolean(\"approved\").default(false).notNull(),\n  approvedAt: timestamp(\"approved_at\"),\n});\n\n// 14. Agregados de Asistencia\nexport const attendanceCalculations = pgTable(\"attendance_calculations\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  workDate: date(\"work_date\").notNull(),\n  firstPunchIn: timestamp(\"first_punch_in\"),\n  lastPunchOut: timestamp(\"last_punch_out\"),\n  totalWorkedMinutes: integer(\"total_worked_minutes\").default(0).notNull(),\n  regularMinutes: integer(\"regular_minutes\").default(0).notNull(),\n  overtimeMinutes: integer(\"overtime_minutes\").default(0).notNull(),\n  nightMinutes: integer(\"night_minutes\").default(0).notNull(),\n  holidayMinutes: integer(\"holiday_minutes\").default(0).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"Pending\").notNull(),\n});\n\n// 15. Configuración Horas Extra\nexport const overtimeConfig = pgTable(\"overtime_config\", {\n  overtimeType: varchar(\"overtime_type\", { length: 50 }).primaryKey(),\n  factor: decimal(\"factor\", { precision: 5, scale: 2 }).notNull(),\n  description: text(\"description\"),\n});\n\n// 16. Horas Extra\nexport const overtime = pgTable(\"overtime\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  workDate: date(\"work_date\").notNull(),\n  overtimeType: varchar(\"overtime_type\", { length: 50 }).notNull(),\n  hours: decimal(\"hours\", { precision: 5, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"Planned\").notNull(),\n  approvedBy: integer(\"approved_by\"),\n  secondApprover: integer(\"second_approver\"),\n  factor: decimal(\"factor\", { precision: 5, scale: 2 }).notNull(),\n  actualHours: decimal(\"actual_hours\", { precision: 5, scale: 2 }).notNull(),\n  paymentAmount: decimal(\"payment_amount\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// 17. Plan de Recuperación\nexport const timeRecoveryPlans = pgTable(\"time_recovery_plans\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  owedMinutes: integer(\"owed_minutes\").notNull(),\n  planDate: date(\"plan_date\").notNull(),\n  fromTime: varchar(\"from_time\", { length: 8 }).notNull(), // HH:mm:ss\n  toTime: varchar(\"to_time\", { length: 8 }).notNull(),\n  reason: text(\"reason\"),\n  createdBy: integer(\"created_by\"),\n});\n\n// 18. Log de Recuperación\nexport const timeRecoveryLogs = pgTable(\"time_recovery_logs\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  recoveryPlanId: integer(\"recovery_plan_id\").references(() => timeRecoveryPlans.id).notNull(),\n  executedDate: date(\"executed_date\").notNull(),\n  minutesRecovered: integer(\"minutes_recovered\").notNull(),\n  approvedBy: integer(\"approved_by\"),\n  approvedAt: timestamp(\"approved_at\"),\n});\n\n// 19. Subrogaciones\nexport const subrogations = pgTable(\"subrogations\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  subrogatedEmployeeId: integer(\"subrogated_employee_id\").references(() => employees.id).notNull(),\n  subrogatingEmployeeId: integer(\"subrogating_employee_id\").references(() => employees.id).notNull(),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\").notNull(),\n  permissionId: integer(\"permission_id\").references(() => permissions.id),\n  vacationId: integer(\"vacation_id\").references(() => vacations.id),\n  reason: text(\"reason\"),\n});\n\n// 20. Movimientos de Personal\nexport const personnelMovements = pgTable(\"personnel_movements\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  contractId: integer(\"contract_id\").references(() => contracts.id).notNull(),\n  originDepartmentId: integer(\"origin_department_id\").references(() => departments.id),\n  destinationDepartmentId: integer(\"destination_department_id\").references(() => departments.id).notNull(),\n  movementDate: date(\"movement_date\").notNull(),\n  movementType: varchar(\"movement_type\", { length: 20 }).notNull(),\n  documentLocation: text(\"document_location\"),\n  reason: text(\"reason\"),\n  createdBy: integer(\"created_by\"),\n});\n\n// 21. Nómina\nexport const payroll = pgTable(\"payroll\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  period: varchar(\"period\", { length: 7 }).notNull(), // \"YYYY-MM\"\n  baseSalary: decimal(\"base_salary\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"Pending\").notNull(),\n  paymentDate: date(\"payment_date\"),\n  bankAccount: varchar(\"bank_account\", { length: 50 }),\n});\n\n// 22. Detalle de Nómina\nexport const payrollLines = pgTable(\"payroll_lines\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  payrollId: integer(\"payroll_id\").references(() => payroll.id).notNull(),\n  lineType: varchar(\"line_type\", { length: 20 }).notNull(),\n  concept: varchar(\"concept\", { length: 100 }).notNull(),\n  quantity: decimal(\"quantity\", { precision: 10, scale: 2 }).notNull(),\n  unitValue: decimal(\"unit_value\", { precision: 10, scale: 2 }).notNull(),\n  notes: text(\"notes\"),\n});\n\n// 23. Auditoría\nexport const audit = pgTable(\"audit\", {\n  id: bigint(\"id\", { mode: \"number\" }).primaryKey().generatedByDefaultAsIdentity(),\n  tableName: varchar(\"table_name\", { length: 100 }).notNull(),\n  action: varchar(\"action\", { length: 20 }).notNull(),\n  recordID: varchar(\"record_id\", { length: 100 }).notNull(),\n  userName: varchar(\"user_name\", { length: 100 }).notNull(),\n  dateTime: timestamp(\"date_time\").defaultNow().notNull(),\n  details: text(\"details\"),\n});\n\n// Esquemas de inserción con Zod\nexport const insertPersonSchema = createInsertSchema(people).omit({ id: true });\nexport const insertEmployeeSchema = createInsertSchema(employees);\nexport const insertFacultySchema = createInsertSchema(faculties).omit({ id: true });\nexport const insertDepartmentSchema = createInsertSchema(departments).omit({ id: true });\nexport const insertScheduleSchema = createInsertSchema(schedules).omit({ id: true });\nexport const insertContractSchema = createInsertSchema(contracts).omit({ id: true });\nexport const insertPermissionTypeSchema = createInsertSchema(permissionTypes).omit({ id: true });\nexport const insertPermissionSchema = createInsertSchema(permissions).omit({ id: true, requestDate: true });\nexport const insertVacationSchema = createInsertSchema(vacations).omit({ id: true });\nexport const insertAttendancePunchSchema = createInsertSchema(attendancePunches).omit({ id: true });\nexport const insertPayrollSchema = createInsertSchema(payroll).omit({ id: true });\nexport const insertPayrollLineSchema = createInsertSchema(payrollLines).omit({ id: true });\n\n// Tipos de selección\nexport type Person = typeof people.$inferSelect;\nexport type Employee = typeof employees.$inferSelect;\nexport type Faculty = typeof faculties.$inferSelect;\nexport type Department = typeof departments.$inferSelect;\nexport type Schedule = typeof schedules.$inferSelect;\nexport type Contract = typeof contracts.$inferSelect;\nexport type PermissionType = typeof permissionTypes.$inferSelect;\nexport type Permission = typeof permissions.$inferSelect;\nexport type Vacation = typeof vacations.$inferSelect;\nexport type AttendancePunch = typeof attendancePunches.$inferSelect;\nexport type Payroll = typeof payroll.$inferSelect;\nexport type PayrollLine = typeof payrollLines.$inferSelect;\n\n// Tipos de inserción\nexport type InsertPerson = z.infer<typeof insertPersonSchema>;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type InsertFaculty = z.infer<typeof insertFacultySchema>;\nexport type InsertDepartment = z.infer<typeof insertDepartmentSchema>;\nexport type InsertSchedule = z.infer<typeof insertScheduleSchema>;\nexport type InsertContract = z.infer<typeof insertContractSchema>;\nexport type InsertPermissionType = z.infer<typeof insertPermissionTypeSchema>;\nexport type InsertPermission = z.infer<typeof insertPermissionSchema>;\nexport type InsertVacation = z.infer<typeof insertVacationSchema>;\nexport type InsertAttendancePunch = z.infer<typeof insertAttendancePunchSchema>;\nexport type InsertPayroll = z.infer<typeof insertPayrollSchema>;\nexport type InsertPayrollLine = z.infer<typeof insertPayrollLineSchema>;\n\n// ===============================\n// SISTEMA DE HOJA DE VIDA\n// ===============================\n\n// Publicaciones\nexport const publications = pgTable(\"publications\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  personId: integer(\"person_id\").references(() => people.id).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  journal: varchar(\"journal\", { length: 255 }),\n  publicationDate: date(\"publication_date\"),\n  issn: varchar(\"issn\", { length: 50 }),\n  doi: varchar(\"doi\", { length: 100 }),\n  url: varchar(\"url\", { length: 500 }),\n  type: varchar(\"type\", { length: 100 }), // Artículo científico, libro, capítulo, etc.\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Cargas familiares\nexport const familyMembers = pgTable(\"family_members\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  personId: integer(\"person_id\").references(() => people.id).notNull(),\n  firstName: varchar(\"first_name\", { length: 255 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 255 }).notNull(),\n  idCard: varchar(\"id_card\", { length: 20 }),\n  birthDate: date(\"birth_date\"),\n  relationship: varchar(\"relationship\", { length: 100 }).notNull(), // hijo/a, cónyuge, etc.\n  hasDisability: boolean(\"has_disability\").default(false),\n  disabilityType: varchar(\"disability_type\", { length: 255 }),\n  disabilityPercentage: integer(\"disability_percentage\"),\n  isStudying: boolean(\"is_studying\").default(false),\n  educationInstitution: varchar(\"education_institution\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Experiencias laborales\nexport const workExperiences = pgTable(\"work_experiences\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  personId: integer(\"person_id\").references(() => people.id).notNull(),\n  company: varchar(\"company\", { length: 255 }).notNull(),\n  position: varchar(\"position\", { length: 255 }).notNull(),\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"),\n  isCurrent: boolean(\"is_current\").default(false),\n  duties: text(\"duties\"),\n  salary: decimal(\"salary\", { precision: 10, scale: 2 }),\n  reasonForLeaving: varchar(\"reason_for_leaving\", { length: 255 }),\n  referenceContact: varchar(\"reference_contact\", { length: 255 }),\n  referenceEmail: varchar(\"reference_email\", { length: 255 }),\n  referencePhone: varchar(\"reference_phone\", { length: 20 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Capacitaciones y cursos\nexport const trainings = pgTable(\"trainings\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  personId: integer(\"person_id\").references(() => people.id).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  institution: varchar(\"institution\", { length: 255 }).notNull(),\n  type: varchar(\"type\", { length: 100 }).notNull(), // curso, seminario, diplomado, etc.\n  modality: varchar(\"modality\", { length: 50 }), // presencial, virtual, semipresencial\n  startDate: date(\"start_date\").notNull(),\n  endDate: date(\"end_date\"),\n  durationHours: integer(\"duration_hours\"),\n  hasCertificate: boolean(\"has_certificate\").default(false),\n  certificateNumber: varchar(\"certificate_number\", { length: 100 }),\n  grade: varchar(\"grade\", { length: 50 }),\n  description: text(\"description\"),\n  fileUrl: varchar(\"file_url\", { length: 500 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Libros publicados\nexport const books = pgTable(\"books\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  personId: integer(\"person_id\").references(() => people.id).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  isbn: varchar(\"isbn\", { length: 50 }),\n  publisher: varchar(\"publisher\", { length: 255 }),\n  publicationDate: date(\"publication_date\"),\n  coAuthors: varchar(\"co_authors\", { length: 500 }),\n  category: varchar(\"category\", { length: 100 }),\n  description: text(\"description\"),\n  url: varchar(\"url\", { length: 500 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Contactos de emergencia\nexport const emergencyContacts = pgTable(\"emergency_contacts\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  personId: integer(\"person_id\").references(() => people.id).notNull(),\n  firstName: varchar(\"first_name\", { length: 255 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 255 }).notNull(),\n  relationship: varchar(\"relationship\", { length: 100 }).notNull(),\n  phone: varchar(\"phone\", { length: 20 }),\n  email: varchar(\"email\", { length: 255 }),\n  address: text(\"address\"),\n  isPrimary: boolean(\"is_primary\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Enfermedades catastróficas\nexport const catastrophicIllnesses = pgTable(\"catastrophic_illnesses\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  personId: integer(\"person_id\").references(() => people.id).notNull(),\n  illnessName: varchar(\"illness_name\", { length: 255 }).notNull(),\n  diagnosisDate: date(\"diagnosis_date\"),\n  treatingDoctor: varchar(\"treating_doctor\", { length: 255 }),\n  medicalInstitution: varchar(\"medical_institution\", { length: 255 }),\n  currentStatus: varchar(\"current_status\", { length: 100 }),\n  treatment: text(\"treatment\"),\n  medications: text(\"medications\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Cuentas bancarias\nexport const bankAccounts = pgTable(\"bank_accounts\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  personId: integer(\"person_id\").references(() => people.id).notNull(),\n  bankName: varchar(\"bank_name\", { length: 255 }).notNull(),\n  accountType: varchar(\"account_type\", { length: 50 }).notNull(), // ahorros, corriente, etc.\n  accountNumber: varchar(\"account_number\", { length: 50 }).notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  isPrimary: boolean(\"is_primary\").default(false),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Esquemas de inserción para hoja de vida\nexport const insertPublicationSchema = createInsertSchema(publications).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertFamilyMemberSchema = createInsertSchema(familyMembers).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertWorkExperienceSchema = createInsertSchema(workExperiences).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertTrainingSchema = createInsertSchema(trainings).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertBookSchema = createInsertSchema(books).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertEmergencyContactSchema = createInsertSchema(emergencyContacts).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertCatastrophicIllnessSchema = createInsertSchema(catastrophicIllnesses).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertBankAccountSchema = createInsertSchema(bankAccounts).omit({ id: true, createdAt: true, updatedAt: true });\n\n// Tipos de selección para hoja de vida\nexport type Publication = typeof publications.$inferSelect;\nexport type FamilyMember = typeof familyMembers.$inferSelect;\nexport type WorkExperience = typeof workExperiences.$inferSelect;\nexport type Training = typeof trainings.$inferSelect;\nexport type Book = typeof books.$inferSelect;\nexport type EmergencyContact = typeof emergencyContacts.$inferSelect;\nexport type CatastrophicIllness = typeof catastrophicIllnesses.$inferSelect;\nexport type BankAccount = typeof bankAccounts.$inferSelect;\n\n// Tipos de inserción para hoja de vida\nexport type InsertPublication = z.infer<typeof insertPublicationSchema>;\nexport type InsertFamilyMember = z.infer<typeof insertFamilyMemberSchema>;\nexport type InsertWorkExperience = z.infer<typeof insertWorkExperienceSchema>;\nexport type InsertTraining = z.infer<typeof insertTrainingSchema>;\nexport type InsertBook = z.infer<typeof insertBookSchema>;\nexport type InsertEmergencyContact = z.infer<typeof insertEmergencyContactSchema>;\nexport type InsertCatastrophicIllness = z.infer<typeof insertCatastrophicIllnessSchema>;\nexport type InsertBankAccount = z.infer<typeof insertBankAccountSchema>;","size_bytes":24358},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Layout from \"@/components/Layout\";\nimport LoginPage from \"@/pages/Login\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport PeoplePage from \"@/pages/People\";\nimport EmployeesPage from \"@/pages/Employees\";\nimport FacultiesPage from \"@/pages/Faculties\";\nimport DepartmentsPage from \"@/pages/Departments\";\nimport ContractsPage from \"@/pages/Contracts\";\nimport PermissionsPage from \"@/pages/Permissions\";\nimport VacationsPage from \"@/pages/Vacations\";\nimport AttendancePage from \"@/pages/Attendance\";\nimport PayrollPage from \"@/pages/Payroll\";\nimport SchedulesPage from \"@/pages/Schedules\";\nimport OvertimePage from \"@/pages/Overtime\";\nimport ReportsPage from \"@/pages/Reports\";\nimport NotFound from \"@/pages/not-found\";\nimport PersonDetail from \"@/pages/PersonDetail\";\n\nfunction Router() {\n  const { isAuthenticated, login, logout } = useAuth();\n\n  if (!isAuthenticated) {\n    return <LoginPage onLogin={login} />;\n  }\n\n  return (\n    <Layout onLogout={logout}>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/people\" component={PeoplePage} />\n        <Route path=\"/people/:id\" component={PersonDetail} />\n        <Route path=\"/employees\" component={EmployeesPage} />\n        <Route path=\"/faculties\" component={FacultiesPage} />\n        <Route path=\"/departments\" component={DepartmentsPage} />\n        <Route path=\"/contracts\" component={ContractsPage} />\n        <Route path=\"/permissions\" component={PermissionsPage} />\n        <Route path=\"/vacations\" component={VacationsPage} />\n        <Route path=\"/attendance\" component={AttendancePage} />\n        <Route path=\"/payroll\" component={PayrollPage} />\n        <Route path=\"/schedules\" component={SchedulesPage} />\n        <Route path=\"/overtime\" component={OvertimePage} />\n        <Route path=\"/reports\" component={ReportsPage} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2428},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Colores oficiales Universidad Técnica de Ambato */\n:root {\n  --uta-blue: #1e40af;\n  --uta-blue-light: #3b82f6;\n  --uta-blue-dark: #1e3a8a;\n  --uta-orange: #f97316;\n  --uta-orange-light: #fb923c;\n  --uta-orange-dark: #ea580c;\n}\n\n:root {\n  /* UTA Brand Colors */\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(218 54% 20%);\n  --card: hsl(210 15% 97%);\n  --card-foreground: hsl(218 54% 20%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(218 54% 20%);\n  --primary: hsl(210 88% 35%) !important; /* UTA Blue */\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(45 100% 50%) !important; /* UTA Gold */\n  --secondary-foreground: hsl(218 54% 20%);\n  --muted: hsl(210 15% 95%);\n  --muted-foreground: hsl(218 30% 45%);\n  --accent: hsl(210 60% 92%);\n  --accent-foreground: hsl(210 88% 35%);\n  --destructive: hsl(358 75% 59%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 15% 88%);\n  --input: hsl(210 15% 96%);\n  --ring: hsl(210 88% 35%);\n  --chart-1: hsl(210 88% 35%); /* UTA Blue */\n  --chart-2: hsl(45 100% 50%); /* UTA Gold */\n  --chart-3: hsl(195 100% 40%); /* Light Blue */\n  --chart-4: hsl(135 60% 40%); /* Green */\n  --chart-5: hsl(285 85% 60%); /* Purple */\n  --sidebar: hsl(210 15% 97%);\n  --sidebar-foreground: hsl(218 54% 20%);\n  --sidebar-primary: hsl(210 88% 35%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(210 60% 92%);\n  --sidebar-accent-foreground: hsl(210 88% 35%);\n  --sidebar-border: hsl(210 15% 88%);\n  --sidebar-ring: hsl(210 88% 35%);\n  --surface: hsl(0 0% 100%);\n  --success: hsl(135 60% 40%);\n  --warning: hsl(45 100% 50%); /* UTA Gold for warnings */\n  --error: hsl(358 75% 59%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 1px 2px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 1px 2px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 2px 4px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 4px 6px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 8px 10px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  /* UTA Dark Mode Colors */\n  --background: hsl(218 54% 8%);\n  --foreground: hsl(210 15% 92%);\n  --card: hsl(218 50% 12%);\n  --card-foreground: hsl(210 15% 88%);\n  --popover: hsl(218 54% 8%);\n  --popover-foreground: hsl(210 15% 92%);\n  --primary: hsl(210 88% 45%); /* Lighter UTA Blue for dark mode */\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(45 100% 60%); /* Brighter UTA Gold for dark mode */\n  --secondary-foreground: hsl(218 54% 8%);\n  --muted: hsl(218 50% 15%);\n  --muted-foreground: hsl(210 15% 60%);\n  --accent: hsl(218 50% 20%);\n  --accent-foreground: hsl(210 88% 45%);\n  --destructive: hsl(358 75% 65%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(218 50% 20%);\n  --input: hsl(218 50% 18%);\n  --ring: hsl(210 88% 45%);\n  --chart-1: hsl(210 88% 45%); /* UTA Blue */\n  --chart-2: hsl(45 100% 60%); /* UTA Gold */\n  --chart-3: hsl(195 100% 50%); /* Light Blue */\n  --chart-4: hsl(135 60% 50%); /* Green */\n  --chart-5: hsl(285 85% 70%); /* Purple */\n  --sidebar: hsl(218 50% 12%);\n  --sidebar-foreground: hsl(210 15% 88%);\n  --sidebar-primary: hsl(210 88% 45%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(218 50% 20%);\n  --sidebar-accent-foreground: hsl(210 88% 45%);\n  --sidebar-border: hsl(218 50% 20%);\n  --sidebar-ring: hsl(210 88% 45%);\n  --surface: hsl(218 50% 12%);\n  --success: hsl(135 60% 50%);\n  --warning: hsl(45 100% 60%); /* UTA Gold for warnings */\n  --error: hsl(358 75% 65%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 1px 2px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 1px 2px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 2px 4px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 4px 6px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00), 0px 8px 10px -1px hsl(208.2 90.9% 45.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(208.2 90.9% 45.3% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n  }\n}\n\n/* Custom utility classes for the design system */\n.surface {\n  background-color: var(--surface);\n}\n\n/* Force UTA Colors */\n.bg-primary {\n  background-color: hsl(210 88% 35%) !important;\n}\n\n.text-primary {\n  color: hsl(210 88% 35%) !important;\n}\n\n.bg-secondary {\n  background-color: hsl(45 100% 50%) !important;\n}\n\n.text-secondary {\n  color: hsl(45 100% 50%) !important;\n}\n\n/* Force UTA Branding - Override everything */\naside h1 {\n  color: #265792 !important;\n}\n\naside .uta-logo {\n  background-color: #265792 !important;\n  color: white !important;\n}\n\n.text-success {\n  color: var(--success);\n}\n\n.text-warning {\n  color: var(--warning);\n}\n\n.text-error {\n  color: var(--error);\n}\n\n.bg-success {\n  background-color: var(--success);\n}\n\n.bg-warning {\n  background-color: var(--warning);\n}\n\n.bg-error {\n  background-color: var(--error);\n}\n\n.border-success {\n  border-color: var(--success);\n}\n\n.border-warning {\n  border-color: var(--warning);\n}\n\n.border-error {\n  border-color: var(--error);\n}\n/* Cache buster 1755189798 */\n","size_bytes":6158},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport \"./uta-branding.css\";\n\n// Global error handlers\nwindow.addEventListener('unhandledrejection', (event) => {\n  console.error('Unhandled promise rejection:', event.reason);\n  // Prevent the default browser behavior\n  event.preventDefault();\n});\n\nwindow.addEventListener('error', (event) => {\n  console.error('Unhandled error:', event.error);\n});\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":507},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Header from \"./Header\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n  onLogout?: () => void;\n}\n\nexport default function Layout({ children, onLogout }: LayoutProps) {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  const toggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        onLogout={onLogout} \n        collapsed={sidebarCollapsed}\n      />\n      <div className=\"flex-1 flex flex-col\">\n        <Header \n          onLogout={onLogout || (() => {})} \n          onToggleSidebar={toggleSidebar}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        <main className=\"flex-1 overflow-y-auto\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":892},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  Users, \n  LayoutDashboard, \n  Clock, \n  CalendarCheck, \n  DollarSign, \n  Building2,\n  FileText,\n  Settings,\n  Calendar,\n  ClipboardList,\n  UserCog,\n  Timer,\n  LogOut\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport LogoUTA from \"@assets/LogoUTA.png\";\n\ninterface SidebarProps {\n  onLogout?: () => void;\n  collapsed?: boolean;\n}\n\nexport default function Sidebar({ onLogout, collapsed = false }: SidebarProps) {\n  const [location] = useLocation();\n\n  const navItems = [\n    { path: \"/\", label: \"Dashboard\", icon: LayoutDashboard },\n    { path: \"/people\", label: \"Personas\", icon: Users },\n    { path: \"/employees\", label: \"Empleados\", icon: UserCog },\n    { path: \"/faculties\", label: \"Facultades\", icon: Building2 },\n    { path: \"/departments\", label: \"Departamentos\", icon: Building2 },\n    { path: \"/schedules\", label: \"Horarios\", icon: Clock },\n    { path: \"/contracts\", label: \"Contratos\", icon: FileText },\n    { path: \"/attendance\", label: \"Asistencia\", icon: Timer },\n    { path: \"/permissions\", label: \"Permisos\", icon: CalendarCheck },\n    { path: \"/vacations\", label: \"Vacaciones\", icon: Calendar },\n    { path: \"/overtime\", label: \"Horas Extra\", icon: ClipboardList },\n    { path: \"/payroll\", label: \"Nómina\", icon: DollarSign },\n    { path: \"/reports\", label: \"Reportes\", icon: FileText },\n  ];\n\n  const isActive = (path: string) => {\n    if (path === \"/\") return location === \"/\";\n    return location.startsWith(path);\n  };\n\n  return (\n    <aside \n      className={`${collapsed ? 'w-16' : 'w-60'} shadow-lg border-r flex flex-col transition-all duration-300`}\n      style={{ \n        backgroundColor: '#ffffff',\n        borderColor: '#e2e8f0'\n      }}\n    >\n      {/* Logo Section */}\n      <div \n        className={`${collapsed ? 'p-3' : 'p-6'} border-b transition-all duration-300`}\n        style={{ \n          borderColor: '#e2e8f0',\n          background: 'linear-gradient(to right, rgba(38, 87, 146, 0.05), rgba(255, 193, 7, 0.05))'\n        }}\n      >\n        <div className=\"flex items-center space-x-3 mb-2\">\n          <div className=\"flex-shrink-0\">\n            {collapsed ? (\n              <Tooltip>\n                <TooltipTrigger asChild>\n                  <img \n                    src={LogoUTA} \n                    alt=\"Logo Universidad Técnica de Ambato\" \n                    className=\"h-8 w-auto object-contain uta-official-logo transition-all duration-300 cursor-help\"\n                    style={{ maxWidth: '40px' }}\n                  />\n                </TooltipTrigger>\n                <TooltipContent side=\"right\" className=\"font-medium\">\n                  <div className=\"text-center\">\n                    <div className=\"font-semibold\">WsUtaSystem</div>\n                    <div className=\"text-xs opacity-90\">Sistema de Gestión de RRHH</div>\n                    <div className=\"text-xs opacity-75\">Universidad Técnica de Ambato</div>\n                  </div>\n                </TooltipContent>\n              </Tooltip>\n            ) : (\n              <img \n                src={LogoUTA} \n                alt=\"Logo Universidad Técnica de Ambato\" \n                className=\"h-10 w-auto object-contain uta-official-logo transition-all duration-300\"\n                style={{ maxWidth: '100px' }}\n              />\n            )}\n          </div>\n          {!collapsed && (\n            <div>\n              <h1 className=\"text-xl uta-system-title\">WsUtaSystem</h1>\n              <p \n                className=\"text-sm\" \n                style={{ color: '#64748b' }}\n              >\n                Sistema de Gestión\n              </p>\n            </div>\n          )}\n        </div>\n        {!collapsed && (\n          <p \n            className=\"text-xs\" \n            style={{ color: '#64748b' }}\n          >\n            Universidad Técnica de Ambato\n          </p>\n        )}\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className={`flex-1 ${collapsed ? 'p-2' : 'p-4'} space-y-2 transition-all duration-300`}>\n        {navItems.map(({ path, label, icon: Icon }) => {\n          const navItem = (\n            <div\n              className={`nav-item flex items-center ${collapsed ? 'px-3 py-3 justify-center' : 'px-4 py-3'} text-sm font-medium rounded-lg transition-colors cursor-pointer ${\n                isActive(path)\n                  ? \"text-white\"\n                  : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n              }`}\n              style={isActive(path) ? { backgroundColor: '#265792' } : {}}\n              data-testid={`nav-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <Icon className={`${collapsed ? 'h-5 w-5' : 'mr-3 h-4 w-4'}`} />\n              {!collapsed && label}\n            </div>\n          );\n\n          return (\n            <Link key={path} href={path}>\n              {collapsed ? (\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    {navItem}\n                  </TooltipTrigger>\n                  <TooltipContent side=\"right\" className=\"font-medium\">\n                    {label}\n                  </TooltipContent>\n                </Tooltip>\n              ) : (\n                navItem\n              )}\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Info */}\n      <div className={`${collapsed ? 'p-2' : 'p-4'} border-t border-border space-y-3 transition-all duration-300`}>\n        <div className={`flex items-center ${collapsed ? 'justify-center' : ''}`}>\n          {collapsed ? (\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <div \n                  className=\"w-8 h-8 rounded-full flex items-center justify-center cursor-help\"\n                  style={{ backgroundColor: '#265792' }}\n                >\n                  <UserCog className=\"h-4 w-4\" style={{ color: '#ffffff' }} />\n                </div>\n              </TooltipTrigger>\n              <TooltipContent side=\"right\" className=\"font-medium\">\n                <div>\n                  <div className=\"font-semibold\">Admin Usuario</div>\n                  <div className=\"text-xs opacity-75\">Administrador</div>\n                </div>\n              </TooltipContent>\n            </Tooltip>\n          ) : (\n            <div \n              className=\"w-8 h-8 rounded-full flex items-center justify-center\"\n              style={{ backgroundColor: '#265792' }}\n            >\n              <UserCog className=\"h-4 w-4\" style={{ color: '#ffffff' }} />\n            </div>\n          )}\n          {!collapsed && (\n            <div className=\"ml-3\">\n              <p className=\"text-sm font-medium text-gray-900\">Admin Usuario</p>\n              <p className=\"text-xs text-gray-500\">Administrador</p>\n            </div>\n          )}\n        </div>\n        \n        {onLogout && (!collapsed ? (\n          <Button\n            onClick={onLogout}\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"w-full justify-start text-red-600 hover:text-red-700 hover:bg-red-50\"\n            data-testid=\"logout-button\"\n          >\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Cerrar Sesión\n          </Button>\n        ) : (\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <Button\n                onClick={onLogout}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full justify-center text-red-600 hover:text-red-700 hover:bg-red-50\"\n                data-testid=\"logout-button-collapsed\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n              </Button>\n            </TooltipTrigger>\n            <TooltipContent side=\"right\" className=\"font-medium\">\n              Cerrar Sesión\n            </TooltipContent>\n          </Tooltip>\n        ))}\n      </div>\n    </aside>\n  );\n}\n","size_bytes":7931},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import type {\n  Persona,\n  InsertPersona,\n  Contrato,\n  InsertContrato,\n  Marcacion,\n  InsertMarcacion,\n  Permiso,\n  InsertPermiso,\n  Vacacion,\n  InsertVacacion,\n  Publicacion,\n  InsertPublicacion,\n} from \"@shared/schema\";\n\nexport const API_BASE = import.meta.env.VITE_API_BASE || \"http://localhost:5000\";\n\n// API helper function según especificación WsUtaSystem\nasync function api<T = any>(path: string, init?: RequestInit): Promise<T> {\n  const res = await fetch(`${API_BASE}${path}`, {\n    headers: { \"Content-Type\": \"application/json\" },\n    ...init,\n  });\n  \n  if (!res.ok) {\n    const errorText = await res.text();\n    throw new Error(`${res.status}: ${errorText}`);\n  }\n  \n  // 204 No Content no tiene body\n  return res.status === 204 ? (null as any) : res.json();\n}\n\n// Personas API - Siguiendo especificación WsUtaSystem\nexport const PersonasAPI = {\n  list: (): Promise<Persona[]> => api(\"/api/personas\"),\n  get: (id: number): Promise<Persona> => api(`/api/personas/${id}`),\n  create: (data: InsertPersona): Promise<Persona> =>\n    api(\"/api/personas\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: Persona): Promise<void> =>\n    api(`/api/personas/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number): Promise<void> =>\n    api(`/api/personas/${id}`, { method: \"DELETE\" }),\n};\n\n// Puestos API\nexport const PuestosAPI = {\n  list: () => api(\"/api/puestos\"),\n  get: (id: number) => api(`/api/puestos/${id}`),\n  create: (data: any) => api(\"/api/puestos\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: any) => api(`/api/puestos/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number) => api(`/api/puestos/${id}`, { method: \"DELETE\" }),\n};\n\n// Contratos API\nexport const ContratosAPI = {\n  list: (): Promise<Contrato[]> => api(\"/api/contratos\"),\n  get: (id: number): Promise<Contrato> => api(`/api/contratos/${id}`),\n  create: (data: InsertContrato): Promise<Contrato> =>\n    api(\"/api/contratos\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: Contrato): Promise<void> =>\n    api(`/api/contratos/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number): Promise<void> =>\n    api(`/api/contratos/${id}`, { method: \"DELETE\" }),\n};\n\n// Turnos APIs\nexport const TurnosAPI = {\n  planes: {\n    list: () => api(\"/api/turnos/planes\"),\n    create: (data: any) => api(\"/api/turnos/planes\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/turnos/planes/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/turnos/planes/${id}`, { method: \"DELETE\" }),\n  },\n  detalles: {\n    list: () => api(\"/api/turnos/detalles\"),\n    create: (data: any) => api(\"/api/turnos/detalles\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/turnos/detalles/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/turnos/detalles/${id}`, { method: \"DELETE\" }),\n  },\n  asignaciones: {\n    list: () => api(\"/api/turnos/asignaciones\"),\n    create: (data: any) => api(\"/api/turnos/asignaciones\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/turnos/asignaciones/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/turnos/asignaciones/${id}`, { method: \"DELETE\" }),\n  },\n};\n\n// Marcaciones API (Asistencia)\nexport const MarcacionesAPI = {\n  list: (): Promise<Marcacion[]> => api(\"/api/marcaciones\"),\n  get: (id: number): Promise<Marcacion> => api(`/api/marcaciones/${id}`),\n  create: (data: InsertMarcacion): Promise<Marcacion> =>\n    api(\"/api/marcaciones\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: Marcacion): Promise<void> =>\n    api(`/api/marcaciones/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number): Promise<void> =>\n    api(`/api/marcaciones/${id}`, { method: \"DELETE\" }),\n};\n\n// Permisos API\nexport const PermisosAPI = {\n  list: (): Promise<Permiso[]> => api(\"/api/permisos\"),\n  get: (id: number): Promise<Permiso> => api(`/api/permisos/${id}`),\n  create: (data: InsertPermiso): Promise<Permiso> =>\n    api(\"/api/permisos\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: Permiso): Promise<void> =>\n    api(`/api/permisos/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number): Promise<void> =>\n    api(`/api/permisos/${id}`, { method: \"DELETE\" }),\n};\n\n// Vacaciones API\nexport const VacacionesAPI = {\n  list: (): Promise<Vacacion[]> => api(\"/api/vacaciones\"),\n  get: (id: number): Promise<Vacacion> => api(`/api/vacaciones/${id}`),\n  create: (data: InsertVacacion): Promise<Vacacion> =>\n    api(\"/api/vacaciones\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: Vacacion): Promise<void> =>\n    api(`/api/vacaciones/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number): Promise<void> =>\n    api(`/api/vacaciones/${id}`, { method: \"DELETE\" }),\n};\n\n// Recuperaciones API\nexport const RecuperacionesAPI = {\n  list: () => api(\"/api/recuperaciones\"),\n  get: (id: number) => api(`/api/recuperaciones/${id}`),\n  create: (data: any) => api(\"/api/recuperaciones\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: any) => api(`/api/recuperaciones/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number) => api(`/api/recuperaciones/${id}`, { method: \"DELETE\" }),\n};\n\n// Subrogaciones API\nexport const SubrogacionesAPI = {\n  list: () => api(\"/api/subrogaciones\"),\n  get: (id: number) => api(`/api/subrogaciones/${id}`),\n  create: (data: any) => api(\"/api/subrogaciones\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: any) => api(`/api/subrogaciones/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number) => api(`/api/subrogaciones/${id}`, { method: \"DELETE\" }),\n};\n\n// Nómina API\nexport const NominaAPI = {\n  periodos: {\n    list: () => api(\"/api/nomina/periodos\"),\n    get: (id: number) => api(`/api/nomina/periodos/${id}`),\n    create: (data: any) => api(\"/api/nomina/periodos\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/nomina/periodos/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/nomina/periodos/${id}`, { method: \"DELETE\" }),\n  },\n  conceptos: {\n    list: () => api(\"/api/nomina/conceptos\"),\n    get: (id: number) => api(`/api/nomina/conceptos/${id}`),\n    create: (data: any) => api(\"/api/nomina/conceptos\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/nomina/conceptos/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/nomina/conceptos/${id}`, { method: \"DELETE\" }),\n  },\n  movimientos: {\n    list: () => api(\"/api/nomina/movimientos\"),\n    get: (id: number) => api(`/api/nomina/movimientos/${id}`),\n    create: (data: any) => api(\"/api/nomina/movimientos\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/nomina/movimientos/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/nomina/movimientos/${id}`, { method: \"DELETE\" }),\n  },\n};\n\n// CV APIs\nexport const CVAPI = {\n  educacion: {\n    list: () => api(\"/api/cv/educacion\"),\n    get: (id: number) => api(`/api/cv/educacion/${id}`),\n    create: (data: any) => api(\"/api/cv/educacion\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/cv/educacion/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/cv/educacion/${id}`, { method: \"DELETE\" }),\n  },\n  experiencia: {\n    list: () => api(\"/api/cv/experiencia\"),\n    get: (id: number) => api(`/api/cv/experiencia/${id}`),\n    create: (data: any) => api(\"/api/cv/experiencia\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/cv/experiencia/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/cv/experiencia/${id}`, { method: \"DELETE\" }),\n  },\n  certificaciones: {\n    list: () => api(\"/api/cv/certificaciones\"),\n    get: (id: number) => api(`/api/cv/certificaciones/${id}`),\n    create: (data: any) => api(\"/api/cv/certificaciones\", { method: \"POST\", body: JSON.stringify(data) }),\n    update: (id: number, data: any) => api(`/api/cv/certificaciones/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n    remove: (id: number) => api(`/api/cv/certificaciones/${id}`, { method: \"DELETE\" }),\n  },\n};\n\n// Publicaciones API\nexport const PublicacionesAPI = {\n  list: (): Promise<Publicacion[]> => api(\"/api/publicaciones\"),\n  get: (id: number): Promise<Publicacion> => api(`/api/publicaciones/${id}`),\n  create: (data: InsertPublicacion): Promise<Publicacion> =>\n    api(\"/api/publicaciones\", { method: \"POST\", body: JSON.stringify(data) }),\n  update: (id: number, data: Publicacion): Promise<void> =>\n    api(`/api/publicaciones/${id}`, { method: \"PUT\", body: JSON.stringify({ ...data, id }) }),\n  remove: (id: number): Promise<void> =>\n    api(`/api/publicaciones/${id}`, { method: \"DELETE\" }),\n};","size_bytes":9552},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: (failureCount, error) => {\n        // Don't retry on client errors (4xx) except 429\n        if (error instanceof Error && error.message.includes('4')) {\n          const status = parseInt(error.message.split(':')[0]);\n          if (status >= 400 && status < 500 && status !== 429) {\n            return false;\n          }\n        }\n        return failureCount < 2;\n      },\n    },\n    mutations: {\n      retry: false,\n      onError: (error) => {\n        console.error('Mutation error:', error);\n      },\n    },\n  },\n});\n","size_bytes":1834},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Asistencia.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Clock, Plus, Search, Trash } from \"lucide-react\";\nimport { MarcacionesAPI, PersonasAPI } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport MarcacionForm from \"@/components/forms/MarcacionForm\";\nimport type { Marcacion } from \"@shared/schema\";\n\nexport default function Asistencia() {\n  const [personaFilter, setPersonaFilter] = useState<string>(\"all\");\n  const [fechaDesde, setFechaDesde] = useState(\"\");\n  const [fechaHasta, setFechaHasta] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: personas = [] } = useQuery({\n    queryKey: [\"/api/personas\"],\n    queryFn: PersonasAPI.list,\n  });\n\n  const { data: marcaciones = [], isLoading } = useQuery({\n    queryKey: [\"/api/marcaciones\", personaFilter, fechaDesde, fechaHasta],\n    queryFn: () => {\n      const params: any = {};\n      if (personaFilter !== \"all\") params.personaId = parseInt(personaFilter);\n      if (fechaDesde) params.desde = fechaDesde;\n      if (fechaHasta) params.hasta = fechaHasta;\n      return MarcacionesAPI.list(params);\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: MarcacionesAPI.remove,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/marcaciones\"] });\n      toast({\n        title: \"Marcación eliminada\",\n        description: \"La marcación ha sido eliminada exitosamente.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar la marcación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = (id: number) => {\n    if (window.confirm(\"¿Está seguro que desea eliminar esta marcación?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const getPersonaName = (personaId: number) => {\n    const persona = personas.find(p => p.id === personaId);\n    return persona ? `${persona.nombres} ${persona.apellidos}` : `ID: ${personaId}`;\n  };\n\n  const getBadgeVariant = (tipo: string) => {\n    switch (tipo) {\n      case \"entrada\": return \"default\";\n      case \"salida\": return \"secondary\";\n      case \"descanso_inicio\": return \"outline\";\n      case \"descanso_fin\": return \"outline\";\n      default: return \"secondary\";\n    }\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Control de Asistencia</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">Registro y consulta de marcaciones</p>\n          </div>\n          <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-new-marcacion\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Nueva Marcación\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Nueva Marcación</DialogTitle>\n              </DialogHeader>\n              <MarcacionForm onSuccess={() => setIsModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div>\n                <Label htmlFor=\"persona-filter\">Persona</Label>\n                <Select value={personaFilter} onValueChange={setPersonaFilter}>\n                  <SelectTrigger data-testid=\"select-persona-filter\">\n                    <SelectValue placeholder=\"Todas las personas\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Todas las personas</SelectItem>\n                    {personas.map((persona) => (\n                      <SelectItem key={persona.id} value={persona.id.toString()}>\n                        {persona.nombres} {persona.apellidos}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"fecha-desde\">Fecha Desde</Label>\n                <Input\n                  id=\"fecha-desde\"\n                  type=\"date\"\n                  value={fechaDesde}\n                  onChange={(e) => setFechaDesde(e.target.value)}\n                  data-testid=\"input-fecha-desde\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"fecha-hasta\">Fecha Hasta</Label>\n                <Input\n                  id=\"fecha-hasta\"\n                  type=\"date\"\n                  value={fechaHasta}\n                  onChange={(e) => setFechaHasta(e.target.value)}\n                  data-testid=\"input-fecha-hasta\"\n                />\n              </div>\n              <div className=\"flex items-end\">\n                <Button className=\"w-full\" data-testid=\"button-search\">\n                  <Search className=\"mr-2 h-4 w-4\" />\n                  Buscar\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Attendance Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"p-6 text-center\">Cargando marcaciones...</div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Fecha</TableHead>\n                      <TableHead>Persona</TableHead>\n                      <TableHead>Hora</TableHead>\n                      <TableHead>Tipo</TableHead>\n                      <TableHead>Acciones</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {marcaciones.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center py-6 text-muted-foreground\">\n                          No se encontraron marcaciones\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      marcaciones.map((marcacion: Marcacion) => (\n                        <TableRow key={marcacion.id} className=\"hover:bg-accent\">\n                          <TableCell data-testid={`text-fecha-${marcacion.id}`}>\n                            {new Date(marcacion.timestamp).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell data-testid={`text-persona-${marcacion.id}`}>\n                            {getPersonaName(marcacion.personaId)}\n                          </TableCell>\n                          <TableCell data-testid={`text-hora-${marcacion.id}`}>\n                            {new Date(marcacion.timestamp).toLocaleTimeString()}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={getBadgeVariant(marcacion.tipo)} data-testid={`badge-tipo-${marcacion.id}`}>\n                              {marcacion.tipo}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => handleDelete(marcacion.id)}\n                              data-testid={`button-delete-marcacion-${marcacion.id}`}\n                            >\n                              <Trash className=\"h-4 w-4\" />\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":8779},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Users, \n  FileText, \n  Clock, \n  CalendarX,\n  UserPlus,\n  ClockIcon,\n  CalendarCheck,\n  FileSpreadsheet,\n  ArrowUp,\n  TriangleAlert\n} from \"lucide-react\";\nimport { PersonasAPI, ContratosAPI, MarcacionesAPI, PermisosAPI } from \"@/lib/api\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const { data: personas = [] } = useQuery({\n    queryKey: [\"/api/personas\"],\n    queryFn: PersonasAPI.list,\n  });\n\n  const { data: contratos = [] } = useQuery({\n    queryKey: [\"/api/contratos\"],\n    queryFn: ContratosAPI.list,\n  });\n\n  const { data: marcaciones = [] } = useQuery({\n    queryKey: [\"/api/marcaciones\"],\n    queryFn: MarcacionesAPI.list,\n  });\n\n  const { data: permisos = [] } = useQuery({\n    queryKey: [\"/api/permisos\"],\n    queryFn: () => PermisosAPI.list(),\n  });\n\n  const contratosActivos = contratos.filter(c => !c.fechaFin || new Date(c.fechaFin) > new Date());\n  const permisosPendientes = permisos.filter(p => p.estado === \"SOLICITADO\");\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Dashboard</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">Resumen general del sistema</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-notifications\">\n              <span className=\"sr-only\">Notificaciones</span>\n              🔔\n            </Button>\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-profile\">\n              <span className=\"sr-only\">Perfil</span>\n              👤\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {/* Total Personas Card */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Personas</p>\n                  <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-total-personas\">\n                    {personas.length}\n                  </p>\n                  <p className=\"text-sm text-success mt-1 flex items-center\">\n                    <ArrowUp className=\"h-3 w-3 mr-1\" />\n                    Empleados registrados\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <Users className=\"text-primary h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contratos Activos Card */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Contratos Activos</p>\n                  <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-contratos-activos\">\n                    {contratosActivos.length}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {personas.length > 0 ? Math.round((contratosActivos.length / personas.length) * 100) : 0}% del total\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center\">\n                  <FileText className=\"text-success h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Marcaciones Hoy Card */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Marcaciones Hoy</p>\n                  <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-marcaciones-hoy\">\n                    {marcaciones.length}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {contratosActivos.length > 0 ? Math.round((marcaciones.length / contratosActivos.length) * 100) : 0}% asistencia\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-warning/10 rounded-lg flex items-center justify-center\">\n                  <Clock className=\"text-warning h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Permisos Pendientes Card */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Permisos Pendientes</p>\n                  <p className=\"text-3xl font-bold text-foreground mt-2\" data-testid=\"text-permisos-pendientes\">\n                    {permisosPendientes.length}\n                  </p>\n                  <p className=\"text-sm text-destructive mt-1 flex items-center\">\n                    <TriangleAlert className=\"h-3 w-3 mr-1\" />\n                    Requieren revisión\n                  </p>\n                </div>\n                <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                  <CalendarX className=\"text-destructive h-6 w-6\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activities & Quick Actions */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Recent Activities */}\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle>Actividades Recientes</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {marcaciones.slice(0, 5).map((marcacion) => (\n                <div key={marcacion.id} className=\"flex items-center space-x-4 p-3 hover:bg-accent rounded-lg transition-colors\">\n                  <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <ClockIcon className=\"text-primary h-4 w-4\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-foreground\">Nueva marcación</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Persona ID: {marcacion.personaId} - {marcacion.tipo}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {new Date(marcacion.timestamp).toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n              ))}\n              {marcaciones.length === 0 && (\n                <p className=\"text-muted-foreground text-center py-4\">No hay marcaciones registradas hoy</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Acciones Rápidas</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/personas\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start h-auto p-4 hover:bg-primary/5\"\n                  data-testid=\"button-quick-add-persona\"\n                >\n                  <UserPlus className=\"mr-3 h-4 w-4 text-muted-foreground\" />\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-foreground\">Agregar Persona</p>\n                    <p className=\"text-sm text-muted-foreground\">Registrar nuevo empleado</p>\n                  </div>\n                </Button>\n              </Link>\n              \n              <Link href=\"/asistencia\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start h-auto p-4 hover:bg-primary/5\"\n                  data-testid=\"button-quick-marcacion\"\n                >\n                  <ClockIcon className=\"mr-3 h-4 w-4 text-muted-foreground\" />\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-foreground\">Registrar Marcación</p>\n                    <p className=\"text-sm text-muted-foreground\">Nueva entrada/salida</p>\n                  </div>\n                </Button>\n              </Link>\n              \n              <Link href=\"/permisos\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start h-auto p-4 hover:bg-primary/5\"\n                  data-testid=\"button-quick-permiso\"\n                >\n                  <CalendarCheck className=\"mr-3 h-4 w-4 text-muted-foreground\" />\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-foreground\">Solicitar Permiso</p>\n                    <p className=\"text-sm text-muted-foreground\">Vacaciones o ausencias</p>\n                  </div>\n                </Button>\n              </Link>\n              \n              <Link href=\"/nomina\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start h-auto p-4 hover:bg-primary/5\"\n                  data-testid=\"button-quick-nomina\"\n                >\n                  <FileSpreadsheet className=\"mr-3 h-4 w-4 text-muted-foreground\" />\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-foreground\">Generar Nómina</p>\n                    <p className=\"text-sm text-muted-foreground\">Procesar período actual</p>\n                  </div>\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":10317},"client/src/pages/Nomina.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, FileSpreadsheet, DollarSign } from \"lucide-react\";\nimport { NominaAPI } from \"@/lib/api\";\nimport type { NominaPeriodo, NominaConcepto, NominaMovimiento } from \"@shared/schema\";\n\nexport default function Nomina() {\n  const [activeTab, setActiveTab] = useState<\"periodos\" | \"conceptos\" | \"movimientos\">(\"periodos\");\n  const [selectedPeriodo, setSelectedPeriodo] = useState<string>(\"all\");\n\n  const { data: periodos = [], isLoading: periodosLoading } = useQuery({\n    queryKey: [\"/api/nomina/periodos\"],\n    queryFn: NominaAPI.periodos.list,\n  });\n\n  const { data: conceptos = [], isLoading: conceptosLoading } = useQuery({\n    queryKey: [\"/api/nomina/conceptos\"],\n    queryFn: NominaAPI.conceptos.list,\n  });\n\n  const { data: movimientos = [], isLoading: movimientosLoading } = useQuery({\n    queryKey: [\"/api/nomina/movimientos\", selectedPeriodo],\n    queryFn: () => {\n      if (selectedPeriodo === \"all\") {\n        return NominaAPI.movimientos.list();\n      }\n      return NominaAPI.movimientos.list(parseInt(selectedPeriodo));\n    },\n  });\n\n  const getBadgeVariant = (estado: string) => {\n    switch (estado) {\n      case \"abierto\": return \"secondary\";\n      case \"cerrado\": return \"default\";\n      case \"procesado\": return \"outline\";\n      default: return \"secondary\";\n    }\n  };\n\n  const getConceptoTipoBadge = (tipo: string) => {\n    return tipo === \"ingreso\" ? \"default\" : \"destructive\";\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Gestión de Nómina</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">Períodos, conceptos y movimientos</p>\n          </div>\n          <Button data-testid=\"button-new-periodo\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Nuevo Período\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-4 border-b border-border\">\n          <button\n            onClick={() => setActiveTab(\"periodos\")}\n            className={`pb-2 px-1 font-medium text-sm border-b-2 transition-colors ${\n              activeTab === \"periodos\"\n                ? \"border-primary text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground\"\n            }`}\n            data-testid=\"tab-periodos\"\n          >\n            Períodos\n          </button>\n          <button\n            onClick={() => setActiveTab(\"conceptos\")}\n            className={`pb-2 px-1 font-medium text-sm border-b-2 transition-colors ${\n              activeTab === \"conceptos\"\n                ? \"border-primary text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground\"\n            }`}\n            data-testid=\"tab-conceptos\"\n          >\n            Conceptos\n          </button>\n          <button\n            onClick={() => setActiveTab(\"movimientos\")}\n            className={`pb-2 px-1 font-medium text-sm border-b-2 transition-colors ${\n              activeTab === \"movimientos\"\n                ? \"border-primary text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground\"\n            }`}\n            data-testid=\"tab-movimientos\"\n          >\n            Movimientos\n          </button>\n        </div>\n\n        {/* Períodos Tab */}\n        {activeTab === \"periodos\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Períodos de Nómina</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {periodosLoading ? (\n                <div className=\"p-6 text-center\">Cargando períodos...</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Nombre</TableHead>\n                        <TableHead>Fecha Inicio</TableHead>\n                        <TableHead>Fecha Fin</TableHead>\n                        <TableHead>Estado</TableHead>\n                        <TableHead>Acciones</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {periodos.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={5} className=\"text-center py-6 text-muted-foreground\">\n                            No hay períodos registrados\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        periodos.map((periodo: NominaPeriodo) => (\n                          <TableRow key={periodo.id} className=\"hover:bg-accent\">\n                            <TableCell className=\"font-medium\" data-testid={`text-nombre-periodo-${periodo.id}`}>\n                              {periodo.nombre}\n                            </TableCell>\n                            <TableCell data-testid={`text-inicio-${periodo.id}`}>\n                              {periodo.fechaInicio}\n                            </TableCell>\n                            <TableCell data-testid={`text-fin-${periodo.id}`}>\n                              {periodo.fechaFin}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={getBadgeVariant(periodo.estado!)} data-testid={`badge-estado-periodo-${periodo.id}`}>\n                                {periodo.estado}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                data-testid={`button-process-${periodo.id}`}\n                              >\n                                <FileSpreadsheet className=\"h-4 w-4\" />\n                              </Button>\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Conceptos Tab */}\n        {activeTab === \"conceptos\" && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Conceptos de Nómina</CardTitle>\n                <Button data-testid=\"button-new-concepto\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Nuevo Concepto\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {conceptosLoading ? (\n                <div className=\"p-6 text-center\">Cargando conceptos...</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Código</TableHead>\n                        <TableHead>Nombre</TableHead>\n                        <TableHead>Tipo</TableHead>\n                        <TableHead>Fórmula</TableHead>\n                        <TableHead>Estado</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {conceptos.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={5} className=\"text-center py-6 text-muted-foreground\">\n                            No hay conceptos registrados\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        conceptos.map((concepto: NominaConcepto) => (\n                          <TableRow key={concepto.id} className=\"hover:bg-accent\">\n                            <TableCell className=\"font-medium\" data-testid={`text-codigo-${concepto.id}`}>\n                              {concepto.codigo}\n                            </TableCell>\n                            <TableCell data-testid={`text-nombre-concepto-${concepto.id}`}>\n                              {concepto.nombre}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={getConceptoTipoBadge(concepto.tipo)} data-testid={`badge-tipo-concepto-${concepto.id}`}>\n                                {concepto.tipo}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"max-w-xs truncate\" data-testid={`text-formula-${concepto.id}`}>\n                              {concepto.formula || \"-\"}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={concepto.activo ? \"default\" : \"secondary\"} data-testid={`badge-activo-${concepto.id}`}>\n                                {concepto.activo ? \"Activo\" : \"Inactivo\"}\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Movimientos Tab */}\n        {activeTab === \"movimientos\" && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>Movimientos de Nómina</CardTitle>\n                <div className=\"flex items-center space-x-4\">\n                  <Select value={selectedPeriodo} onValueChange={setSelectedPeriodo}>\n                    <SelectTrigger className=\"w-48\" data-testid=\"select-periodo-filter\">\n                      <SelectValue placeholder=\"Seleccionar período\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Todos los períodos</SelectItem>\n                      {periodos.map((periodo) => (\n                        <SelectItem key={periodo.id} value={periodo.id.toString()}>\n                          {periodo.nombre}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <Button data-testid=\"button-new-movimiento\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Nuevo Movimiento\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {movimientosLoading ? (\n                <div className=\"p-6 text-center\">Cargando movimientos...</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Persona</TableHead>\n                        <TableHead>Período</TableHead>\n                        <TableHead>Concepto</TableHead>\n                        <TableHead>Valor</TableHead>\n                        <TableHead>Observaciones</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {movimientos.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={5} className=\"text-center py-6 text-muted-foreground\">\n                            No hay movimientos registrados\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        movimientos.map((movimiento: NominaMovimiento) => (\n                          <TableRow key={movimiento.id} className=\"hover:bg-accent\">\n                            <TableCell data-testid={`text-persona-movimiento-${movimiento.id}`}>\n                              ID: {movimiento.personaId}\n                            </TableCell>\n                            <TableCell data-testid={`text-periodo-movimiento-${movimiento.id}`}>\n                              ID: {movimiento.periodoId}\n                            </TableCell>\n                            <TableCell data-testid={`text-concepto-movimiento-${movimiento.id}`}>\n                              ID: {movimiento.conceptoId}\n                            </TableCell>\n                            <TableCell className=\"font-medium\" data-testid={`text-valor-${movimiento.id}`}>\n                              ${movimiento.valor}\n                            </TableCell>\n                            <TableCell className=\"max-w-xs truncate\" data-testid={`text-observaciones-movimiento-${movimiento.id}`}>\n                              {movimiento.observaciones || \"-\"}\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":13737},"client/src/pages/Permisos.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { CalendarCheck, Plus, Check, X } from \"lucide-react\";\nimport { PermisosAPI, VacacionesAPI, PersonasAPI } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport PermisoForm from \"@/components/forms/PermisoForm\";\nimport type { Permiso, Vacacion } from \"@shared/schema\";\n\nexport default function Permisos() {\n  const [activeTab, setActiveTab] = useState<\"permisos\" | \"vacaciones\">(\"permisos\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: personas = [] } = useQuery({\n    queryKey: [\"/api/personas\"],\n    queryFn: PersonasAPI.list,\n  });\n\n  const { data: permisos = [], isLoading: permisosLoading } = useQuery({\n    queryKey: [\"/api/permisos\"],\n    queryFn: () => PermisosAPI.list(),\n  });\n\n  const { data: vacaciones = [], isLoading: vacacionesLoading } = useQuery({\n    queryKey: [\"/api/vacaciones\"],\n    queryFn: () => VacacionesAPI.list(),\n  });\n\n  const updatePermisoMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: any }) => \n      PermisosAPI.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/permisos\"] });\n      toast({\n        title: \"Permiso actualizado\",\n        description: \"El estado del permiso ha sido actualizado.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el permiso.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getPersonaName = (personaId: number) => {\n    const persona = personas.find(p => p.id === personaId);\n    return persona ? `${persona.nombres} ${persona.apellidos}` : `ID: ${personaId}`;\n  };\n\n  const handleApprove = (id: number) => {\n    updatePermisoMutation.mutate({ id, data: { estado: \"aprobado\" } });\n  };\n\n  const handleReject = (id: number) => {\n    updatePermisoMutation.mutate({ id, data: { estado: \"rechazado\" } });\n  };\n\n  const getBadgeVariant = (estado: string) => {\n    switch (estado) {\n      case \"aprobado\": return \"default\";\n      case \"rechazado\": return \"destructive\";\n      case \"pendiente\": return \"secondary\";\n      default: return \"secondary\";\n    }\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Permisos & Vacaciones</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">Gestión de solicitudes y estados</p>\n          </div>\n          <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-new-permiso\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Nueva Solicitud\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Nueva Solicitud de Permiso</DialogTitle>\n              </DialogHeader>\n              <PermisoForm onSuccess={() => setIsModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-4 border-b border-border\">\n          <button\n            onClick={() => setActiveTab(\"permisos\")}\n            className={`pb-2 px-1 font-medium text-sm border-b-2 transition-colors ${\n              activeTab === \"permisos\"\n                ? \"border-primary text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground\"\n            }`}\n            data-testid=\"tab-permisos\"\n          >\n            Permisos\n          </button>\n          <button\n            onClick={() => setActiveTab(\"vacaciones\")}\n            className={`pb-2 px-1 font-medium text-sm border-b-2 transition-colors ${\n              activeTab === \"vacaciones\"\n                ? \"border-primary text-primary\"\n                : \"border-transparent text-muted-foreground hover:text-foreground\"\n            }`}\n            data-testid=\"tab-vacaciones\"\n          >\n            Vacaciones\n          </button>\n        </div>\n\n        {/* Permisos Tab */}\n        {activeTab === \"permisos\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Solicitudes de Permisos</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {permisosLoading ? (\n                <div className=\"p-6 text-center\">Cargando permisos...</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Persona</TableHead>\n                        <TableHead>Tipo</TableHead>\n                        <TableHead>Desde</TableHead>\n                        <TableHead>Hasta</TableHead>\n                        <TableHead>Motivo</TableHead>\n                        <TableHead>Estado</TableHead>\n                        <TableHead>Acciones</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {permisos.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={7} className=\"text-center py-6 text-muted-foreground\">\n                            No hay permisos registrados\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        permisos.map((permiso: Permiso) => (\n                          <TableRow key={permiso.id} className=\"hover:bg-accent\">\n                            <TableCell data-testid={`text-persona-permiso-${permiso.id}`}>\n                              {getPersonaName(permiso.personaId)}\n                            </TableCell>\n                            <TableCell data-testid={`text-tipo-${permiso.id}`}>\n                              {permiso.tipo}\n                            </TableCell>\n                            <TableCell data-testid={`text-desde-${permiso.id}`}>\n                              {permiso.fechaDesde}\n                            </TableCell>\n                            <TableCell data-testid={`text-hasta-${permiso.id}`}>\n                              {permiso.fechaHasta}\n                            </TableCell>\n                            <TableCell className=\"max-w-xs truncate\" data-testid={`text-motivo-${permiso.id}`}>\n                              {permiso.motivo}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={getBadgeVariant(permiso.estado!)} data-testid={`badge-estado-permiso-${permiso.id}`}>\n                                {permiso.estado}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              {permiso.estado === \"pendiente\" && (\n                                <div className=\"flex items-center space-x-2\">\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    onClick={() => handleApprove(permiso.id)}\n                                    data-testid={`button-approve-${permiso.id}`}\n                                  >\n                                    <Check className=\"h-4 w-4 text-green-600\" />\n                                  </Button>\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    onClick={() => handleReject(permiso.id)}\n                                    data-testid={`button-reject-${permiso.id}`}\n                                  >\n                                    <X className=\"h-4 w-4 text-red-600\" />\n                                  </Button>\n                                </div>\n                              )}\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Vacaciones Tab */}\n        {activeTab === \"vacaciones\" && (\n          <Card>\n            <CardHeader>\n              <CardTitle>Solicitudes de Vacaciones</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {vacacionesLoading ? (\n                <div className=\"p-6 text-center\">Cargando vacaciones...</div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Persona</TableHead>\n                        <TableHead>Desde</TableHead>\n                        <TableHead>Hasta</TableHead>\n                        <TableHead>Días</TableHead>\n                        <TableHead>Estado</TableHead>\n                        <TableHead>Observaciones</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {vacaciones.length === 0 ? (\n                        <TableRow>\n                          <TableCell colSpan={6} className=\"text-center py-6 text-muted-foreground\">\n                            No hay vacaciones registradas\n                          </TableCell>\n                        </TableRow>\n                      ) : (\n                        vacaciones.map((vacacion: Vacacion) => (\n                          <TableRow key={vacacion.id} className=\"hover:bg-accent\">\n                            <TableCell data-testid={`text-persona-vacacion-${vacacion.id}`}>\n                              {getPersonaName(vacacion.personaId)}\n                            </TableCell>\n                            <TableCell data-testid={`text-desde-vacacion-${vacacion.id}`}>\n                              {vacacion.fechaDesde}\n                            </TableCell>\n                            <TableCell data-testid={`text-hasta-vacacion-${vacacion.id}`}>\n                              {vacacion.fechaHasta}\n                            </TableCell>\n                            <TableCell data-testid={`text-dias-${vacacion.id}`}>\n                              {vacacion.diasSolicitados}\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant={getBadgeVariant(vacacion.estado!)} data-testid={`badge-estado-vacacion-${vacacion.id}`}>\n                                {vacacion.estado}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"max-w-xs truncate\" data-testid={`text-observaciones-${vacacion.id}`}>\n                              {vacacion.observaciones}\n                            </TableCell>\n                          </TableRow>\n                        ))\n                      )}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </>\n  );\n}\n","size_bytes":11879},"client/src/pages/PersonaDetail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, User, FileText, Clock, Calendar, DollarSign } from \"lucide-react\";\nimport { PersonasAPI, ContratosAPI, MarcacionesAPI, PermisosAPI } from \"@/lib/api\";\nimport { Link } from \"wouter\";\nimport PersonaForm from \"@/components/forms/PersonaForm\";\n\nexport default function PersonaDetail() {\n  const { id } = useParams();\n  const personaId = parseInt(id!);\n\n  const { data: persona, isLoading } = useQuery({\n    queryKey: [\"/api/personas\", personaId],\n    queryFn: () => PersonasAPI.get(personaId),\n    enabled: !!personaId,\n  });\n\n  const { data: contratos = [] } = useQuery({\n    queryKey: [\"/api/contratos\"],\n    queryFn: ContratosAPI.list,\n    select: (data) => data.filter(c => c.personaId === personaId),\n  });\n\n  const { data: marcaciones = [] } = useQuery({\n    queryKey: [\"/api/marcaciones\", personaId],\n    queryFn: () => MarcacionesAPI.list({ personaId }),\n  });\n\n  const { data: permisos = [] } = useQuery({\n    queryKey: [\"/api/permisos\", personaId],\n    queryFn: () => PermisosAPI.list(personaId),\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 text-center\">\n        <p>Cargando información de la persona...</p>\n      </div>\n    );\n  }\n\n  if (!persona) {\n    return (\n      <div className=\"p-6 text-center\">\n        <p>Persona no encontrada</p>\n        <Link href=\"/personas\">\n          <Button className=\"mt-4\">Volver a Personas</Button>\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-border px-6 py-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/personas\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-personas\">\n              <ArrowLeft className=\"h-4 w-4\" />\n            </Button>\n          </Link>\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-persona-name\">\n              {persona.nombres} {persona.apellidos}\n            </h2>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"text-persona-id\">\n              ID: {persona.identificacion}\n            </p>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        <Card>\n          <Tabs defaultValue=\"info\" className=\"w-full\">\n            <div className=\"border-b border-border\">\n              <TabsList className=\"grid w-full grid-cols-5 bg-transparent h-auto p-0\">\n                <TabsTrigger \n                  value=\"info\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none py-4\"\n                  data-testid=\"tab-info\"\n                >\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Información Personal\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"contracts\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none py-4\"\n                  data-testid=\"tab-contracts\"\n                >\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  Contratos\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"attendance\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none py-4\"\n                  data-testid=\"tab-attendance\"\n                >\n                  <Clock className=\"mr-2 h-4 w-4\" />\n                  Asistencia\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"permits\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none py-4\"\n                  data-testid=\"tab-permits\"\n                >\n                  <Calendar className=\"mr-2 h-4 w-4\" />\n                  Permisos\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"payroll\" \n                  className=\"data-[state=active]:border-b-2 data-[state=active]:border-primary rounded-none py-4\"\n                  data-testid=\"tab-payroll\"\n                >\n                  <DollarSign className=\"mr-2 h-4 w-4\" />\n                  Nómina\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"info\" className=\"p-6\">\n              <PersonaForm persona={persona} />\n            </TabsContent>\n\n            <TabsContent value=\"contracts\" className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold\">Historial de Contratos</h3>\n                <Button data-testid=\"button-add-contract\">\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  Nuevo Contrato\n                </Button>\n              </div>\n              <div className=\"space-y-4\">\n                {contratos.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-6\">No hay contratos registrados</p>\n                ) : (\n                  contratos.map((contrato) => (\n                    <Card key={contrato.id} className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">Contrato #{contrato.id}</h4>\n                        <Badge variant={contrato.estado ? \"default\" : \"secondary\"}>\n                          {contrato.estado ? \"Activo\" : \"Inactivo\"}\n                        </Badge>\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground\">\n                        <div>\n                          <span className=\"font-medium\">Tipo:</span> {contrato.tipo}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Fecha Inicio:</span> {contrato.fechaInicio}\n                        </div>\n                        <div>\n                          <span className=\"font-medium\">Sueldo Base:</span> ${contrato.sueldoBase}\n                        </div>\n                      </div>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"attendance\" className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Marcaciones Recientes</h3>\n              <div className=\"space-y-4\">\n                {marcaciones.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-6\">No hay marcaciones registradas</p>\n                ) : (\n                  marcaciones.slice(0, 10).map((marcacion) => (\n                    <Card key={marcacion.id} className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"font-medium\">{new Date(marcacion.timestamp).toLocaleDateString()}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {new Date(marcacion.timestamp).toLocaleTimeString()}\n                          </p>\n                        </div>\n                        <Badge variant={marcacion.tipo === \"entrada\" ? \"default\" : \"secondary\"}>\n                          {marcacion.tipo}\n                        </Badge>\n                      </div>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"permits\" className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Permisos y Vacaciones</h3>\n              <div className=\"space-y-4\">\n                {permisos.length === 0 ? (\n                  <p className=\"text-muted-foreground text-center py-6\">No hay permisos registrados</p>\n                ) : (\n                  permisos.map((permiso) => (\n                    <Card key={permiso.id} className=\"p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">{permiso.tipo}</h4>\n                        <Badge \n                          variant={\n                            permiso.estado === \"aprobado\" ? \"default\" :\n                            permiso.estado === \"rechazado\" ? \"destructive\" :\n                            \"secondary\"\n                          }\n                        >\n                          {permiso.estado}\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        <p>Desde: {permiso.fechaDesde} - Hasta: {permiso.fechaHasta}</p>\n                        <p>Motivo: {permiso.motivo}</p>\n                      </div>\n                    </Card>\n                  ))\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"payroll\" className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Información de Nómina</h3>\n              <p className=\"text-muted-foreground\">Información de nómina no disponible</p>\n            </TabsContent>\n          </Tabs>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":9521},"client/src/pages/Personas.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Eye, Edit, Trash, Filter, Plus } from \"lucide-react\";\nimport { PersonasAPI } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport PersonaForm from \"@/components/forms/PersonaForm\";\nimport { Link } from \"wouter\";\nimport type { Persona } from \"@shared/schema\";\n\nexport default function Personas() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: personas = [], isLoading } = useQuery({\n    queryKey: [\"/api/personas\"],\n    queryFn: PersonasAPI.list,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: PersonasAPI.remove,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/personas\"] });\n      toast({\n        title: \"Persona eliminada\",\n        description: \"La persona ha sido eliminada exitosamente.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar la persona.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredPersonas = personas.filter((persona: Persona) => {\n    const matchesSearch = \n      persona.nombres.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      persona.apellidos.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      persona.identificacion.includes(searchTerm) ||\n      (persona.emailInstitucional && persona.emailInstitucional.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesStatus = statusFilter === \"all\" || \n      (statusFilter === \"active\" && persona.estado) ||\n      (statusFilter === \"inactive\" && !persona.estado);\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const handleDelete = (id: number) => {\n    if (window.confirm(\"¿Está seguro que desea eliminar esta persona?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Gestión de Personas</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">Administra empleados y sus datos personales</p>\n          </div>\n          <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-new-persona\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Nueva Persona\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Nueva Persona</DialogTitle>\n              </DialogHeader>\n              <PersonaForm onSuccess={() => setIsModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Search and Filters */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"md:col-span-2\">\n                <Input\n                  placeholder=\"Buscar por nombre, identificación o email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-personas\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"Todos los estados\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos los estados</SelectItem>\n                  <SelectItem value=\"active\">Activo</SelectItem>\n                  <SelectItem value=\"inactive\">Inactivo</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" data-testid=\"button-apply-filter\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                Filtrar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Personas Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"p-6 text-center\">Cargando personas...</div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Identificación</TableHead>\n                      <TableHead>Nombre Completo</TableHead>\n                      <TableHead>Email</TableHead>\n                      <TableHead>Estado</TableHead>\n                      <TableHead>Acciones</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPersonas.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center py-6 text-muted-foreground\">\n                          No se encontraron personas\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      filteredPersonas.map((persona: Persona) => (\n                        <TableRow key={persona.id} className=\"hover:bg-accent\">\n                          <TableCell className=\"font-medium\" data-testid={`text-identificacion-${persona.id}`}>\n                            {persona.identificacion}\n                          </TableCell>\n                          <TableCell data-testid={`text-nombre-${persona.id}`}>\n                            {persona.nombres} {persona.apellidos}\n                          </TableCell>\n                          <TableCell className=\"text-muted-foreground\" data-testid={`text-email-${persona.id}`}>\n                            {persona.emailInstitucional || \"-\"}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant={persona.estado ? \"default\" : \"secondary\"}\n                              data-testid={`badge-estado-${persona.id}`}\n                            >\n                              {persona.estado ? \"Activo\" : \"Inactivo\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Link href={`/personas/${persona.id}`}>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  data-testid={`button-view-${persona.id}`}\n                                >\n                                  <Eye className=\"h-4 w-4\" />\n                                </Button>\n                              </Link>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                data-testid={`button-edit-${persona.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleDelete(persona.id)}\n                                data-testid={`button-delete-${persona.id}`}\n                              >\n                                <Trash className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":8802},"client/src/pages/Publicaciones.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Eye, Edit, Trash, Filter, Plus } from \"lucide-react\";\nimport { PublicacionesAPI } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport type { Publicacion, InsertPublicacion } from \"@shared/schema\";\n\nconst publicacionSchema = z.object({\n  titulo: z.string().min(1, \"El título es requerido\"),\n  contenido: z.string().min(1, \"El contenido es requerido\"),\n  tipo: z.enum([\"noticia\", \"comunicado\", \"evento\"], {\n    required_error: \"El tipo es requerido\"\n  }),\n  fechaPublicacion: z.string().min(1, \"La fecha de publicación es requerida\"),\n  autorId: z.number().optional(),\n});\n\ntype PublicacionFormData = z.infer<typeof publicacionSchema>;\n\nexport default function Publicaciones() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [tipoFilter, setTipoFilter] = useState<string>(\"all\");\n  const [yearFilter, setYearFilter] = useState<string>(\"all\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingPublicacion, setEditingPublicacion] = useState<Publicacion | null>(null);\n  const { toast } = useToast();\n\n  const { data: publicaciones = [], isLoading } = useQuery({\n    queryKey: [\"/api/publicaciones\"],\n    queryFn: PublicacionesAPI.list,\n  });\n\n  const createMutation = useMutation({\n    mutationFn: PublicacionesAPI.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/publicaciones\"] });\n      toast({\n        title: \"Publicación creada\",\n        description: \"La publicación ha sido creada exitosamente.\",\n      });\n      setIsModalOpen(false);\n      reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la publicación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: Partial<InsertPublicacion> }) =>\n      PublicacionesAPI.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/publicaciones\"] });\n      toast({\n        title: \"Publicación actualizada\",\n        description: \"La publicación ha sido actualizada exitosamente.\",\n      });\n      setIsModalOpen(false);\n      setEditingPublicacion(null);\n      reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar la publicación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: PublicacionesAPI.remove,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/publicaciones\"] });\n      toast({\n        title: \"Publicación eliminada\",\n        description: \"La publicación ha sido eliminada exitosamente.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar la publicación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = useForm<PublicacionFormData>({\n    resolver: zodResolver(publicacionSchema),\n  });\n\n  const filteredPublicaciones = publicaciones.filter((publicacion: Publicacion) => {\n    const matchesSearch = \n      publicacion.titulo.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      publicacion.contenido.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesTipo = tipoFilter === \"all\" || publicacion.tipo === tipoFilter;\n    \n    const publicacionYear = new Date(publicacion.fechaPublicacion).getFullYear().toString();\n    const matchesYear = yearFilter === \"all\" || publicacionYear === yearFilter;\n    \n    return matchesSearch && matchesTipo && matchesYear;\n  });\n\n  const uniqueYears = Array.from(\n    new Set(publicaciones.map(p => new Date(p.fechaPublicacion).getFullYear()))\n  ).sort((a, b) => b - a);\n\n  const handleEdit = (publicacion: Publicacion) => {\n    setEditingPublicacion(publicacion);\n    setValue(\"titulo\", publicacion.titulo);\n    setValue(\"contenido\", publicacion.contenido);\n    setValue(\"tipo\", publicacion.tipo as \"noticia\" | \"comunicado\" | \"evento\");\n    setValue(\"fechaPublicacion\", publicacion.fechaPublicacion);\n    setIsModalOpen(true);\n  };\n\n  const handleDelete = (id: number) => {\n    if (window.confirm(\"¿Está seguro que desea eliminar esta publicación?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const onSubmit = (data: PublicacionFormData) => {\n    if (editingPublicacion) {\n      updateMutation.mutate({ id: editingPublicacion.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleNewPublicacion = () => {\n    setEditingPublicacion(null);\n    reset();\n    setIsModalOpen(true);\n  };\n\n  const getBadgeVariant = (tipo: string) => {\n    switch (tipo) {\n      case \"noticia\": return \"default\";\n      case \"comunicado\": return \"secondary\";\n      case \"evento\": return \"outline\";\n      default: return \"secondary\";\n    }\n  };\n\n  return (\n    <>\n      {/* Header */}\n      <header className=\"bg-surface shadow-sm border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Gestión de Publicaciones</h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">Administra noticias, comunicados y eventos</p>\n          </div>\n          <Button onClick={handleNewPublicacion} data-testid=\"button-new-publicacion\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Nueva Publicación\n          </Button>\n        </div>\n      </header>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Search and Filters */}\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n              <div className=\"md:col-span-2\">\n                <Input\n                  placeholder=\"Buscar por título o contenido...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search-publicaciones\"\n                />\n              </div>\n              <Select value={tipoFilter} onValueChange={setTipoFilter}>\n                <SelectTrigger data-testid=\"select-tipo-filter\">\n                  <SelectValue placeholder=\"Todos los tipos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos los tipos</SelectItem>\n                  <SelectItem value=\"noticia\">Noticia</SelectItem>\n                  <SelectItem value=\"comunicado\">Comunicado</SelectItem>\n                  <SelectItem value=\"evento\">Evento</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={yearFilter} onValueChange={setYearFilter}>\n                <SelectTrigger data-testid=\"select-year-filter\">\n                  <SelectValue placeholder=\"Todos los años\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos los años</SelectItem>\n                  {uniqueYears.map((year) => (\n                    <SelectItem key={year} value={year.toString()}>\n                      {year}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" data-testid=\"button-apply-filter\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                Filtrar\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Publicaciones Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            {isLoading ? (\n              <div className=\"p-6 text-center\">Cargando publicaciones...</div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Título</TableHead>\n                      <TableHead>Tipo</TableHead>\n                      <TableHead>Fecha</TableHead>\n                      <TableHead>Estado</TableHead>\n                      <TableHead>Acciones</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredPublicaciones.length === 0 ? (\n                      <TableRow>\n                        <TableCell colSpan={5} className=\"text-center py-6 text-muted-foreground\">\n                          No se encontraron publicaciones\n                        </TableCell>\n                      </TableRow>\n                    ) : (\n                      filteredPublicaciones.map((publicacion: Publicacion) => (\n                        <TableRow key={publicacion.id} className=\"hover:bg-accent\">\n                          <TableCell className=\"font-medium max-w-xs truncate\" data-testid={`text-titulo-${publicacion.id}`}>\n                            {publicacion.titulo}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={getBadgeVariant(publicacion.tipo)} data-testid={`badge-tipo-${publicacion.id}`}>\n                              {publicacion.tipo}\n                            </Badge>\n                          </TableCell>\n                          <TableCell data-testid={`text-fecha-${publicacion.id}`}>\n                            {new Date(publicacion.fechaPublicacion).toLocaleDateString()}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={publicacion.activo ? \"default\" : \"secondary\"} data-testid={`badge-estado-${publicacion.id}`}>\n                              {publicacion.activo ? \"Activo\" : \"Inactivo\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                data-testid={`button-view-${publicacion.id}`}\n                              >\n                                <Eye className=\"h-4 w-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleEdit(publicacion)}\n                                data-testid={`button-edit-${publicacion.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => handleDelete(publicacion.id)}\n                                data-testid={`button-delete-${publicacion.id}`}\n                              >\n                                <Trash className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    )}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Modal for New/Edit Publicacion */}\n      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingPublicacion ? \"Editar Publicación\" : \"Nueva Publicación\"}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label htmlFor=\"titulo\">\n                  Título <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"titulo\"\n                  {...register(\"titulo\")}\n                  placeholder=\"Título de la publicación\"\n                  data-testid=\"input-titulo\"\n                />\n                {errors.titulo && (\n                  <p className=\"text-sm text-destructive mt-1\">{errors.titulo.message}</p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"tipo\">\n                  Tipo <span className=\"text-destructive\">*</span>\n                </Label>\n                <Select\n                  onValueChange={(value) => setValue(\"tipo\", value as \"noticia\" | \"comunicado\" | \"evento\")}\n                  defaultValue=\"\"\n                >\n                  <SelectTrigger data-testid=\"select-tipo\">\n                    <SelectValue placeholder=\"Seleccionar tipo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"noticia\">Noticia</SelectItem>\n                    <SelectItem value=\"comunicado\">Comunicado</SelectItem>\n                    <SelectItem value=\"evento\">Evento</SelectItem>\n                  </SelectContent>\n                </Select>\n                {errors.tipo && (\n                  <p className=\"text-sm text-destructive mt-1\">{errors.tipo.message}</p>\n                )}\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"fechaPublicacion\">\n                  Fecha de Publicación <span className=\"text-destructive\">*</span>\n                </Label>\n                <Input\n                  id=\"fechaPublicacion\"\n                  type=\"date\"\n                  {...register(\"fechaPublicacion\")}\n                  data-testid=\"input-fecha-publicacion\"\n                />\n                {errors.fechaPublicacion && (\n                  <p className=\"text-sm text-destructive mt-1\">{errors.fechaPublicacion.message}</p>\n                )}\n              </div>\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"contenido\">\n                  Contenido <span className=\"text-destructive\">*</span>\n                </Label>\n                <Textarea\n                  id=\"contenido\"\n                  {...register(\"contenido\")}\n                  placeholder=\"Contenido de la publicación\"\n                  rows={6}\n                  data-testid=\"textarea-contenido\"\n                />\n                {errors.contenido && (\n                  <p className=\"text-sm text-destructive mt-1\">{errors.contenido.message}</p>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setIsModalOpen(false)}\n                data-testid=\"button-cancel\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={isSubmitting}\n                data-testid=\"button-submit\"\n              >\n                {editingPublicacion ? \"Actualizar\" : \"Crear\"} Publicación\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":16227},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/forms/MarcacionForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { MarcacionesAPI, PersonasAPI } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst marcacionSchema = z.object({\n  personaId: z.number({\n    required_error: \"La persona es requerida\",\n  }),\n  tipo: z.enum([\"entrada\", \"salida\", \"descanso_inicio\", \"descanso_fin\"], {\n    required_error: \"El tipo de marcación es requerido\",\n  }),\n  observaciones: z.string().optional(),\n});\n\ntype MarcacionFormData = z.infer<typeof marcacionSchema>;\n\ninterface MarcacionFormProps {\n  onSuccess?: () => void;\n}\n\nexport default function MarcacionForm({ onSuccess }: MarcacionFormProps) {\n  const { toast } = useToast();\n\n  const { data: personas = [] } = useQuery({\n    queryKey: [\"/api/personas\"],\n    queryFn: PersonasAPI.list,\n    select: (data) => data.filter(p => p.estado), // Only active personas\n  });\n\n  const createMutation = useMutation({\n    mutationFn: MarcacionesAPI.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/marcaciones\"] });\n      toast({\n        title: \"Marcación registrada\",\n        description: \"La marcación ha sido registrada exitosamente.\",\n      });\n      reset();\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo registrar la marcación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    formState: { errors, isSubmitting },\n  } = useForm<MarcacionFormData>({\n    resolver: zodResolver(marcacionSchema),\n  });\n\n  const onSubmit = (data: MarcacionFormData) => {\n    const marcacionData = {\n      ...data,\n      timestamp: new Date(),\n      observaciones: data.observaciones || undefined,\n    };\n\n    createMutation.mutate(marcacionData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"personaId\">\n            Persona <span className=\"text-destructive\">*</span>\n          </Label>\n          <Select\n            onValueChange={(value) => setValue(\"personaId\", parseInt(value))}\n            data-testid=\"select-persona\"\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Seleccionar persona\" />\n            </SelectTrigger>\n            <SelectContent>\n              {personas.map((persona) => (\n                <SelectItem key={persona.id} value={persona.id.toString()}>\n                  {persona.nombres} {persona.apellidos} - {persona.identificacion}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors.personaId && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.personaId.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"tipo\">\n            Tipo de Marcación <span className=\"text-destructive\">*</span>\n          </Label>\n          <Select\n            onValueChange={(value) => setValue(\"tipo\", value as \"entrada\" | \"salida\" | \"descanso_inicio\" | \"descanso_fin\")}\n            data-testid=\"select-tipo-marcacion\"\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Seleccionar tipo\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"entrada\">Entrada</SelectItem>\n              <SelectItem value=\"salida\">Salida</SelectItem>\n              <SelectItem value=\"descanso_inicio\">Inicio de Descanso</SelectItem>\n              <SelectItem value=\"descanso_fin\">Fin de Descanso</SelectItem>\n            </SelectContent>\n          </Select>\n          {errors.tipo && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.tipo.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"observaciones\">Observaciones</Label>\n          <Textarea\n            id=\"observaciones\"\n            {...register(\"observaciones\")}\n            placeholder=\"Observaciones adicionales (opcional)\"\n            rows={3}\n            data-testid=\"textarea-observaciones\"\n          />\n          {errors.observaciones && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.observaciones.message}</p>\n          )}\n        </div>\n\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <p className=\"text-sm text-muted-foreground\">\n            <strong>Fecha y Hora:</strong> {new Date().toLocaleString()}\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-1\">\n            La marcación se registrará con la fecha y hora actual\n          </p>\n        </div>\n      </div>\n      \n      <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n        <Button \n          type=\"button\" \n          variant=\"outline\" \n          onClick={() => onSuccess?.()}\n          data-testid=\"button-cancel-marcacion\"\n        >\n          Cancelar\n        </Button>\n        <Button \n          type=\"submit\" \n          disabled={isSubmitting}\n          data-testid=\"button-submit-marcacion\"\n        >\n          Registrar Marcación\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":5571},"client/src/components/forms/PermisoForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { PermisosAPI, PersonasAPI } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst permisoSchema = z.object({\n  personaId: z.number({\n    required_error: \"La persona es requerida\",\n  }),\n  tipo: z.enum([\"medico\", \"personal\", \"compensatorio\"], {\n    required_error: \"El tipo de permiso es requerido\",\n  }),\n  fechaDesde: z.string().min(1, \"La fecha de inicio es requerida\"),\n  fechaHasta: z.string().min(1, \"La fecha de fin es requerida\"),\n  horas: z.number().min(1, \"Las horas son requeridas\").optional(),\n  motivo: z.string().min(1, \"El motivo es requerido\"),\n  observaciones: z.string().optional(),\n}).refine((data) => {\n  const desde = new Date(data.fechaDesde);\n  const hasta = new Date(data.fechaHasta);\n  return hasta >= desde;\n}, {\n  message: \"La fecha de fin debe ser posterior o igual a la fecha de inicio\",\n  path: [\"fechaHasta\"],\n});\n\ntype PermisoFormData = z.infer<typeof permisoSchema>;\n\ninterface PermisoFormProps {\n  onSuccess?: () => void;\n}\n\nexport default function PermisoForm({ onSuccess }: PermisoFormProps) {\n  const { toast } = useToast();\n\n  const { data: personas = [] } = useQuery({\n    queryKey: [\"/api/personas\"],\n    queryFn: PersonasAPI.list,\n    select: (data) => data.filter(p => p.estado), // Only active personas\n  });\n\n  const createMutation = useMutation({\n    mutationFn: PermisosAPI.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/permisos\"] });\n      toast({\n        title: \"Permiso creado\",\n        description: \"La solicitud de permiso ha sido creada exitosamente.\",\n      });\n      reset();\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la solicitud de permiso.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    formState: { errors, isSubmitting },\n  } = useForm<PermisoFormData>({\n    resolver: zodResolver(permisoSchema),\n  });\n\n  const fechaDesde = watch(\"fechaDesde\");\n  const fechaHasta = watch(\"fechaHasta\");\n\n  // Calculate hours if both dates are selected\n  const calculateHours = () => {\n    if (fechaDesde && fechaHasta) {\n      const desde = new Date(fechaDesde);\n      const hasta = new Date(fechaHasta);\n      const diffTime = Math.abs(hasta.getTime() - desde.getTime());\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      return diffDays * 8; // Assuming 8 hours per day\n    }\n    return 0;\n  };\n\n  const onSubmit = (data: PermisoFormData) => {\n    const permisoData = {\n      ...data,\n      horas: data.horas || calculateHours(),\n      observaciones: data.observaciones || undefined,\n    };\n\n    createMutation.mutate(permisoData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"md:col-span-2\">\n          <Label htmlFor=\"personaId\">\n            Persona <span className=\"text-destructive\">*</span>\n          </Label>\n          <Select\n            onValueChange={(value) => setValue(\"personaId\", parseInt(value))}\n            data-testid=\"select-persona-permiso\"\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Seleccionar persona\" />\n            </SelectTrigger>\n            <SelectContent>\n              {personas.map((persona) => (\n                <SelectItem key={persona.id} value={persona.id.toString()}>\n                  {persona.nombres} {persona.apellidos} - {persona.identificacion}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {errors.personaId && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.personaId.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"tipo\">\n            Tipo de Permiso <span className=\"text-destructive\">*</span>\n          </Label>\n          <Select\n            onValueChange={(value) => setValue(\"tipo\", value as \"medico\" | \"personal\" | \"compensatorio\")}\n            data-testid=\"select-tipo-permiso\"\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Seleccionar tipo\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"medico\">Médico</SelectItem>\n              <SelectItem value=\"personal\">Personal</SelectItem>\n              <SelectItem value=\"compensatorio\">Compensatorio</SelectItem>\n            </SelectContent>\n          </Select>\n          {errors.tipo && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.tipo.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"horas\">Horas</Label>\n          <Input\n            id=\"horas\"\n            type=\"number\"\n            {...register(\"horas\", { valueAsNumber: true })}\n            placeholder={calculateHours().toString()}\n            data-testid=\"input-horas\"\n          />\n          {errors.horas && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.horas.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"fechaDesde\">\n            Fecha Desde <span className=\"text-destructive\">*</span>\n          </Label>\n          <Input\n            id=\"fechaDesde\"\n            type=\"date\"\n            {...register(\"fechaDesde\")}\n            data-testid=\"input-fecha-desde-permiso\"\n          />\n          {errors.fechaDesde && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.fechaDesde.message}</p>\n          )}\n        </div>\n\n        <div>\n          <Label htmlFor=\"fechaHasta\">\n            Fecha Hasta <span className=\"text-destructive\">*</span>\n          </Label>\n          <Input\n            id=\"fechaHasta\"\n            type=\"date\"\n            {...register(\"fechaHasta\")}\n            data-testid=\"input-fecha-hasta-permiso\"\n          />\n          {errors.fechaHasta && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.fechaHasta.message}</p>\n          )}\n        </div>\n\n        <div className=\"md:col-span-2\">\n          <Label htmlFor=\"motivo\">\n            Motivo <span className=\"text-destructive\">*</span>\n          </Label>\n          <Textarea\n            id=\"motivo\"\n            {...register(\"motivo\")}\n            placeholder=\"Describe el motivo del permiso\"\n            rows={3}\n            data-testid=\"textarea-motivo\"\n          />\n          {errors.motivo && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.motivo.message}</p>\n          )}\n        </div>\n\n        <div className=\"md:col-span-2\">\n          <Label htmlFor=\"observaciones\">Observaciones</Label>\n          <Textarea\n            id=\"observaciones\"\n            {...register(\"observaciones\")}\n            placeholder=\"Observaciones adicionales (opcional)\"\n            rows={2}\n            data-testid=\"textarea-observaciones-permiso\"\n          />\n          {errors.observaciones && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.observaciones.message}</p>\n          )}\n        </div>\n      </div>\n\n      {fechaDesde && fechaHasta && (\n        <div className=\"bg-muted p-4 rounded-lg\">\n          <p className=\"text-sm text-muted-foreground\">\n            <strong>Duración calculada:</strong> {calculateHours()} horas\n          </p>\n        </div>\n      )}\n      \n      <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n        <Button \n          type=\"button\" \n          variant=\"outline\" \n          onClick={() => onSuccess?.()}\n          data-testid=\"button-cancel-permiso\"\n        >\n          Cancelar\n        </Button>\n        <Button \n          type=\"submit\" \n          disabled={isSubmitting}\n          data-testid=\"button-submit-permiso\"\n        >\n          Crear Solicitud\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":8354},"client/src/components/forms/PersonaForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { PersonasAPI } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Persona, InsertPersona } from \"@shared/schema\";\n\nconst personaSchema = z.object({\n  identificacion: z.string().min(1, \"La identificación es requerida\"),\n  nombres: z.string().min(1, \"Los nombres son requeridos\"),\n  apellidos: z.string().min(1, \"Los apellidos son requeridos\"),\n  emailInstitucional: z.string().email(\"Email inválido\").optional().or(z.literal(\"\")),\n  telefono: z.string().optional(),\n  fechaNacimiento: z.string().optional(),\n});\n\ntype PersonaFormData = z.infer<typeof personaSchema>;\n\ninterface PersonaFormProps {\n  persona?: Persona;\n  onSuccess?: () => void;\n}\n\nexport default function PersonaForm({ persona, onSuccess }: PersonaFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!persona;\n\n  const createMutation = useMutation({\n    mutationFn: PersonasAPI.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/personas\"] });\n      toast({\n        title: \"Persona creada\",\n        description: \"La persona ha sido creada exitosamente.\",\n      });\n      reset();\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la persona.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: number; data: Partial<InsertPersona> }) =>\n      PersonasAPI.update(id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/personas\"] });\n      if (persona) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/personas\", persona.id] });\n      }\n      toast({\n        title: \"Persona actualizada\",\n        description: \"La persona ha sido actualizada exitosamente.\",\n      });\n      onSuccess?.();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar la persona.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors, isSubmitting },\n  } = useForm<PersonaFormData>({\n    resolver: zodResolver(personaSchema),\n    defaultValues: persona ? {\n      identificacion: persona.identificacion,\n      nombres: persona.nombres,\n      apellidos: persona.apellidos,\n      emailInstitucional: persona.emailInstitucional || \"\",\n      telefono: persona.telefono || \"\",\n      fechaNacimiento: persona.fechaNacimiento || \"\",\n    } : {\n      identificacion: \"\",\n      nombres: \"\",\n      apellidos: \"\",\n      emailInstitucional: \"\",\n      telefono: \"\",\n      fechaNacimiento: \"\",\n    },\n  });\n\n  const onSubmit = (data: PersonaFormData) => {\n    // Clean up empty strings for optional fields\n    const cleanData = {\n      ...data,\n      emailInstitucional: data.emailInstitucional || undefined,\n      telefono: data.telefono || undefined,\n      fechaNacimiento: data.fechaNacimiento || undefined,\n    };\n\n    if (isEditing && persona) {\n      updateMutation.mutate({ id: persona.id, data: cleanData });\n    } else {\n      createMutation.mutate(cleanData);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <Label htmlFor=\"identificacion\">\n            Identificación <span className=\"text-destructive\">*</span>\n          </Label>\n          <Input\n            id=\"identificacion\"\n            {...register(\"identificacion\")}\n            placeholder=\"1234567890\"\n            disabled={isEditing}\n            data-testid=\"input-identificacion\"\n          />\n          {errors.identificacion && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.identificacion.message}</p>\n          )}\n        </div>\n        <div>\n          <Label htmlFor=\"nombres\">\n            Nombres <span className=\"text-destructive\">*</span>\n          </Label>\n          <Input\n            id=\"nombres\"\n            {...register(\"nombres\")}\n            placeholder=\"Juan Carlos\"\n            data-testid=\"input-nombres\"\n          />\n          {errors.nombres && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.nombres.message}</p>\n          )}\n        </div>\n        <div>\n          <Label htmlFor=\"apellidos\">\n            Apellidos <span className=\"text-destructive\">*</span>\n          </Label>\n          <Input\n            id=\"apellidos\"\n            {...register(\"apellidos\")}\n            placeholder=\"Pérez González\"\n            data-testid=\"input-apellidos\"\n          />\n          {errors.apellidos && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.apellidos.message}</p>\n          )}\n        </div>\n        <div>\n          <Label htmlFor=\"emailInstitucional\">Email Institucional</Label>\n          <Input\n            id=\"emailInstitucional\"\n            type=\"email\"\n            {...register(\"emailInstitucional\")}\n            placeholder=\"usuario@empresa.com\"\n            data-testid=\"input-email\"\n          />\n          {errors.emailInstitucional && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.emailInstitucional.message}</p>\n          )}\n        </div>\n        <div>\n          <Label htmlFor=\"telefono\">Teléfono</Label>\n          <Input\n            id=\"telefono\"\n            {...register(\"telefono\")}\n            placeholder=\"+593 99 123 4567\"\n            data-testid=\"input-telefono\"\n          />\n          {errors.telefono && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.telefono.message}</p>\n          )}\n        </div>\n        <div>\n          <Label htmlFor=\"fechaNacimiento\">Fecha de Nacimiento</Label>\n          <Input\n            id=\"fechaNacimiento\"\n            type=\"date\"\n            {...register(\"fechaNacimiento\")}\n            data-testid=\"input-fecha-nacimiento\"\n          />\n          {errors.fechaNacimiento && (\n            <p className=\"text-sm text-destructive mt-1\">{errors.fechaNacimiento.message}</p>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"flex justify-end space-x-3 pt-4 border-t border-border\">\n        <Button \n          type=\"button\" \n          variant=\"outline\" \n          onClick={() => reset()}\n          data-testid=\"button-reset\"\n        >\n          {isEditing ? \"Cancelar\" : \"Limpiar\"}\n        </Button>\n        <Button \n          type=\"submit\" \n          disabled={isSubmitting}\n          data-testid=\"button-submit-persona\"\n        >\n          {isEditing ? \"Guardar Cambios\" : \"Crear Persona\"}\n        </Button>\n      </div>\n    </form>\n  );\n}\n","size_bytes":6938},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/forms/FamilyMemberForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport type { FamilyMember, InsertFamilyMember } from \"@shared/schema\";\n\nconst familyMemberFormSchema = z.object({\n  personId: z.number(),\n  firstName: z.string().min(1, \"El nombre es requerido\"),\n  lastName: z.string().min(1, \"El apellido es requerido\"),\n  idCard: z.string().optional(),\n  birthDate: z.string().optional(),\n  relationship: z.string().min(1, \"La relación familiar es requerida\"),\n  hasDisability: z.boolean().default(false),\n  disabilityType: z.string().optional(),\n  disabilityPercentage: z.number().optional(),\n  isStudying: z.boolean().default(false),\n  educationInstitution: z.string().optional(),\n});\n\ninterface FamilyMemberFormProps {\n  personId: number;\n  familyMember?: FamilyMember;\n  onSubmit: (data: InsertFamilyMember) => Promise<void>;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nexport default function FamilyMemberForm({\n  personId,\n  familyMember,\n  onSubmit,\n  onCancel,\n  isLoading = false,\n}: FamilyMemberFormProps) {\n  const form = useForm<InsertFamilyMember>({\n    resolver: zodResolver(familyMemberFormSchema),\n    defaultValues: familyMember ? {\n      ...familyMember,\n    } : {\n      personId,\n      firstName: \"\",\n      lastName: \"\",\n      idCard: \"\",\n      birthDate: \"\",\n      relationship: \"\",\n      hasDisability: false,\n      disabilityType: \"\",\n      disabilityPercentage: undefined,\n      isStudying: false,\n      educationInstitution: \"\",\n    },\n  });\n\n  const handleSubmit = async (data: InsertFamilyMember) => {\n    try {\n      await onSubmit(data);\n      if (!familyMember) {\n        form.reset();\n      }\n    } catch (error) {\n      console.error(\"Error submitting family member:\", error);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"firstName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Nombres</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-first-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"lastName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Apellidos</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-last-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"relationship\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Relación Familiar</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-relationship\">\n                      <SelectValue placeholder=\"Seleccionar relación\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Cónyuge\">Cónyuge</SelectItem>\n                    <SelectItem value=\"Hijo/a\">Hijo/a</SelectItem>\n                    <SelectItem value=\"Padre\">Padre</SelectItem>\n                    <SelectItem value=\"Madre\">Madre</SelectItem>\n                    <SelectItem value=\"Hermano/a\">Hermano/a</SelectItem>\n                    <SelectItem value=\"Otro\">Otro</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"idCard\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Cédula de Identidad</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-id-card\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"birthDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Fecha de Nacimiento</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"date\" data-testid=\"input-birth-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"hasDisability\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"checkbox-has-disability\"\n                  />\n                </FormControl>\n                <div className=\"space-y-1 leading-none\">\n                  <FormLabel>¿Tiene discapacidad?</FormLabel>\n                </div>\n              </FormItem>\n            )}\n          />\n\n          {form.watch(\"hasDisability\") && (\n            <>\n              <FormField\n                control={form.control}\n                name=\"disabilityType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tipo de Discapacidad</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-disability-type\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"disabilityPercentage\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Porcentaje de Discapacidad</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"number\" \n                        min=\"0\" \n                        max=\"100\"\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                        data-testid=\"input-disability-percentage\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </>\n          )}\n\n          <FormField\n            control={form.control}\n            name=\"isStudying\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"checkbox-is-studying\"\n                  />\n                </FormControl>\n                <div className=\"space-y-1 leading-none\">\n                  <FormLabel>¿Se encuentra estudiando?</FormLabel>\n                </div>\n              </FormItem>\n            )}\n          />\n\n          {form.watch(\"isStudying\") && (\n            <FormField\n              control={form.control}\n              name=\"educationInstitution\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Institución Educativa</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-education-institution\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n        </div>\n\n        <div className=\"flex gap-2 pt-4\">\n          <Button type=\"submit\" disabled={isLoading} data-testid=\"button-submit\">\n            {isLoading ? \"Guardando...\" : familyMember ? \"Actualizar\" : \"Crear\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel\">\n            Cancelar\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":8790},"client/src/components/forms/TrainingForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport type { Training, InsertTraining } from \"@shared/schema\";\n\nconst trainingFormSchema = z.object({\n  personId: z.number(),\n  name: z.string().min(1, \"El nombre de la capacitación es requerido\"),\n  institution: z.string().min(1, \"La institución es requerida\"),\n  type: z.string().min(1, \"El tipo es requerido\"),\n  modality: z.string().optional(),\n  startDate: z.string().min(1, \"La fecha de inicio es requerida\"),\n  endDate: z.string().optional(),\n  durationHours: z.number().optional(),\n  hasCertificate: z.boolean().default(false),\n  certificateNumber: z.string().optional(),\n  grade: z.string().optional(),\n  description: z.string().optional(),\n  fileUrl: z.string().optional(),\n});\n\ninterface TrainingFormProps {\n  personId: number;\n  training?: Training;\n  onSubmit: (data: InsertTraining) => Promise<void>;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nexport default function TrainingForm({\n  personId,\n  training,\n  onSubmit,\n  onCancel,\n  isLoading = false,\n}: TrainingFormProps) {\n  const form = useForm<InsertTraining>({\n    resolver: zodResolver(trainingFormSchema),\n    defaultValues: training ? {\n      ...training,\n    } : {\n      personId,\n      name: \"\",\n      institution: \"\",\n      type: \"\",\n      modality: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      durationHours: undefined,\n      hasCertificate: false,\n      certificateNumber: \"\",\n      grade: \"\",\n      description: \"\",\n      fileUrl: \"\",\n    },\n  });\n\n  const handleSubmit = async (data: InsertTraining) => {\n    try {\n      await onSubmit(data);\n      if (!training) {\n        form.reset();\n      }\n    } catch (error) {\n      console.error(\"Error submitting training:\", error);\n    }\n  };\n\n  const hasCertificate = form.watch(\"hasCertificate\");\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem className=\"md:col-span-2\">\n                <FormLabel>Nombre de la Capacitación</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"institution\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Institución</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-institution\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"type\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Tipo</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-type\">\n                      <SelectValue placeholder=\"Seleccionar tipo\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Curso\">Curso</SelectItem>\n                    <SelectItem value=\"Seminario\">Seminario</SelectItem>\n                    <SelectItem value=\"Taller\">Taller</SelectItem>\n                    <SelectItem value=\"Diplomado\">Diplomado</SelectItem>\n                    <SelectItem value=\"Especialización\">Especialización</SelectItem>\n                    <SelectItem value=\"Certificación\">Certificación</SelectItem>\n                    <SelectItem value=\"Otro\">Otro</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"modality\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Modalidad</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-modality\">\n                      <SelectValue placeholder=\"Seleccionar modalidad\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"Presencial\">Presencial</SelectItem>\n                    <SelectItem value=\"Virtual\">Virtual</SelectItem>\n                    <SelectItem value=\"Semipresencial\">Semipresencial</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"durationHours\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Duración (horas)</FormLabel>\n                <FormControl>\n                  <Input \n                    {...field} \n                    type=\"number\" \n                    min=\"1\"\n                    onChange={(e) => field.onChange(parseInt(e.target.value) || undefined)}\n                    data-testid=\"input-duration-hours\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"startDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Fecha de Inicio</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"date\" data-testid=\"input-start-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"endDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Fecha de Finalización</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"date\" data-testid=\"input-end-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"hasCertificate\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 self-end pb-2\">\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"checkbox-has-certificate\"\n                  />\n                </FormControl>\n                <div className=\"space-y-1 leading-none\">\n                  <FormLabel>¿Tiene certificado?</FormLabel>\n                </div>\n              </FormItem>\n            )}\n          />\n\n          {hasCertificate && (\n            <>\n              <FormField\n                control={form.control}\n                name=\"certificateNumber\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Número de Certificado</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-certificate-number\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"grade\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Calificación</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"input-grade\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"fileUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>URL del Archivo</FormLabel>\n                    <FormControl>\n                      <Input {...field} type=\"url\" data-testid=\"input-file-url\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </>\n          )}\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Descripción</FormLabel>\n              <FormControl>\n                <Textarea {...field} rows={3} data-testid=\"textarea-description\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-2 pt-4\">\n          <Button type=\"submit\" disabled={isLoading} data-testid=\"button-submit\">\n            {isLoading ? \"Guardando...\" : training ? \"Actualizar\" : \"Crear\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel\">\n            Cancelar\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":9997},"client/src/components/forms/WorkExperienceForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport type { WorkExperience, InsertWorkExperience } from \"@shared/schema\";\n\nconst workExperienceFormSchema = z.object({\n  personId: z.number(),\n  company: z.string().min(1, \"La empresa es requerida\"),\n  position: z.string().min(1, \"El cargo es requerido\"),\n  startDate: z.string().min(1, \"La fecha de inicio es requerida\"),\n  endDate: z.string().optional(),\n  isCurrent: z.boolean().default(false),\n  duties: z.string().optional(),\n  salary: z.number().optional(),\n  reasonForLeaving: z.string().optional(),\n  referenceContact: z.string().optional(),\n  referenceEmail: z.string().optional(),\n  referencePhone: z.string().optional(),\n});\n\ninterface WorkExperienceFormProps {\n  personId: number;\n  workExperience?: WorkExperience;\n  onSubmit: (data: InsertWorkExperience) => Promise<void>;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nexport default function WorkExperienceForm({\n  personId,\n  workExperience,\n  onSubmit,\n  onCancel,\n  isLoading = false,\n}: WorkExperienceFormProps) {\n  const form = useForm<InsertWorkExperience>({\n    resolver: zodResolver(workExperienceFormSchema),\n    defaultValues: workExperience ? {\n      ...workExperience,\n      salary: workExperience.salary ? parseFloat(workExperience.salary) : undefined,\n    } : {\n      personId,\n      company: \"\",\n      position: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      isCurrent: false,\n      duties: \"\",\n      salary: undefined,\n      reasonForLeaving: \"\",\n      referenceContact: \"\",\n      referenceEmail: \"\",\n      referencePhone: \"\",\n    },\n  });\n\n  const handleSubmit = async (data: InsertWorkExperience) => {\n    try {\n      await onSubmit(data);\n      if (!workExperience) {\n        form.reset();\n      }\n    } catch (error) {\n      console.error(\"Error submitting work experience:\", error);\n    }\n  };\n\n  const isCurrent = form.watch(\"isCurrent\");\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"company\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Empresa/Organización</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-company\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"position\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Cargo/Posición</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-position\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"startDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Fecha de Inicio</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"date\" data-testid=\"input-start-date\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"isCurrent\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 self-end pb-2\">\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    data-testid=\"checkbox-is-current\"\n                  />\n                </FormControl>\n                <div className=\"space-y-1 leading-none\">\n                  <FormLabel>Trabajo actual</FormLabel>\n                </div>\n              </FormItem>\n            )}\n          />\n\n          {!isCurrent && (\n            <FormField\n              control={form.control}\n              name=\"endDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Fecha de Finalización</FormLabel>\n                  <FormControl>\n                    <Input {...field} type=\"date\" data-testid=\"input-end-date\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n\n          <FormField\n            control={form.control}\n            name=\"salary\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Salario (USD)</FormLabel>\n                <FormControl>\n                  <Input \n                    {...field} \n                    type=\"number\" \n                    step=\"0.01\"\n                    min=\"0\"\n                    onChange={(e) => field.onChange(parseFloat(e.target.value) || undefined)}\n                    data-testid=\"input-salary\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {!isCurrent && (\n            <FormField\n              control={form.control}\n              name=\"reasonForLeaving\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Motivo de Salida</FormLabel>\n                  <FormControl>\n                    <Input {...field} data-testid=\"input-reason-leaving\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n\n          <FormField\n            control={form.control}\n            name=\"referenceContact\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Contacto de Referencia</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-reference-contact\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"referenceEmail\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email de Referencia</FormLabel>\n                <FormControl>\n                  <Input {...field} type=\"email\" data-testid=\"input-reference-email\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"referencePhone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Teléfono de Referencia</FormLabel>\n                <FormControl>\n                  <Input {...field} data-testid=\"input-reference-phone\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"duties\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Funciones y Responsabilidades</FormLabel>\n              <FormControl>\n                <Textarea {...field} rows={4} data-testid=\"textarea-duties\" />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-2 pt-4\">\n          <Button type=\"submit\" disabled={isLoading} data-testid=\"button-submit\">\n            {isLoading ? \"Guardando...\" : workExperience ? \"Actualizar\" : \"Crear\"}\n          </Button>\n          <Button type=\"button\" variant=\"outline\" onClick={onCancel} data-testid=\"button-cancel\">\n            Cancelar\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":8219},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { LogOut, User, Menu } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\ninterface HeaderProps {\n  onLogout: () => void;\n  onToggleSidebar?: () => void;\n  sidebarCollapsed?: boolean;\n}\n\nexport default function Header({ onLogout, onToggleSidebar, sidebarCollapsed }: HeaderProps) {\n  return (\n    <header className=\"border-b bg-white dark:bg-gray-800 px-6 py-3\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          {onToggleSidebar && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onToggleSidebar}\n              className=\"text-gray-600 hover:text-gray-900\"\n              data-testid=\"sidebar-toggle-button\"\n            >\n              <Menu className=\"h-5 w-5\" />\n            </Button>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"flex items-center space-x-2\"\n                data-testid=\"user-menu-trigger\"\n              >\n                <div \n                  className=\"w-8 h-8 rounded-full flex items-center justify-center\"\n                  style={{ backgroundColor: '#265792' }}\n                >\n                  <User className=\"h-4 w-4 text-white\" />\n                </div>\n                <span className=\"text-sm font-medium\">Admin Usuario</span>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuItem \n                onClick={onLogout}\n                className=\"text-red-600 focus:text-red-600\"\n                data-testid=\"logout-menu-item\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Cerrar Sesión\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2205},"client/src/pages/People.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Link } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { Person, InsertPerson, Employee } from \"@shared/schema\";\nimport PersonForm from \"@/components/forms/PersonForm\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { \n  User, \n  Plus, \n  Search,\n  Users,\n  GraduationCap,\n  Building2,\n  UserCheck,\n  Eye\n} from \"lucide-react\";\n\nexport default function People() {\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [editingPerson, setEditingPerson] = useState<Person | undefined>();\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: people = [], isLoading: isLoadingPeople } = useQuery<Person[]>({\n    queryKey: [\"/api/people\"],\n  });\n\n  const { data: employees = [], isLoading: isLoadingEmployees } = useQuery<Employee[]>({\n    queryKey: [\"/api/employees\"],\n  });\n\n  // Filtrar personas por término de búsqueda\n  const filteredPeople = useMemo(() => {\n    if (!searchTerm) return people;\n    const term = searchTerm.toLowerCase();\n    return people.filter(person => \n      person.firstName.toLowerCase().includes(term) ||\n      person.lastName.toLowerCase().includes(term) ||\n      person.idCard.includes(term) ||\n      person.email.toLowerCase().includes(term)\n    );\n  }, [people, searchTerm]);\n\n  // Calcular estadísticas\n  const stats = useMemo(() => {\n    const employeeTypes = employees.reduce((acc, employee) => {\n      acc[employee.type] = (acc[employee.type] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      totalPeople: people.filter(p => p.isActive).length,\n      totalEmployees: employees.filter(e => e.isActive).length,\n      teachers: employeeTypes[\"Teacher_LOSE\"] || 0,\n      administrative: employeeTypes[\"Administrative_LOSEP\"] || 0,\n      contractual: employeeTypes[\"Employee_CT\"] || 0,\n      coordinators: employeeTypes[\"Coordinator\"] || 0,\n    };\n  }, [people, employees]);\n\n  const createPersonMutation = useMutation({\n    mutationFn: async (data: InsertPerson) => {\n      return apiRequest(\"/api/people\", {\n        method: \"POST\",\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/people\"] });\n      setIsFormOpen(false);\n      toast({\n        title: \"Persona creada\",\n        description: \"La nueva persona se ha registrado correctamente.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"No se pudo crear la persona.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreatePerson = async (data: InsertPerson) => {\n    createPersonMutation.mutate(data);\n  };\n\n  if (isLoadingPeople || isLoadingEmployees) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Gestión de Personas</h1>\n            <p className=\"text-gray-600 mt-2\">Dashboard de personal y directorio</p>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[1, 2, 3, 4].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader className=\"space-y-2\">\n                <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                <div className=\"h-8 bg-gray-300 rounded w-1/2\"></div>\n              </CardHeader>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Gestión de Personas</h1>\n          <p className=\"text-gray-600 mt-2\">Dashboard de personal y directorio completo</p>\n        </div>\n        <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>\n          <DialogTrigger asChild>\n            <Button \n              className=\"bg-uta-blue hover:bg-uta-blue/90\"\n              data-testid=\"button-add-person\"\n            >\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Agregar Persona\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" aria-describedby=\"add-person-dialog-description\">\n            <DialogHeader>\n              <DialogTitle>Agregar Nueva Persona</DialogTitle>\n              <DialogDescription id=\"add-person-dialog-description\">\n                Registra una nueva persona en el sistema universitario\n              </DialogDescription>\n            </DialogHeader>\n            <PersonForm\n              person={editingPerson}\n              onSubmit={handleCreatePerson}\n              onCancel={() => {\n                setIsFormOpen(false);\n                setEditingPerson(undefined);\n              }}\n              isLoading={createPersonMutation.isPending}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Dashboard de Estadísticas */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Personal</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-uta-blue\">{stats.totalPeople}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Personal activo registrado\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Docentes</CardTitle>\n            <GraduationCap className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-green-600\">{stats.teachers}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Profesores LOSE\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Administrativos</CardTitle>\n            <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-blue-600\">{stats.administrative}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Personal LOSEP\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Contratados</CardTitle>\n            <UserCheck className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-orange-600\">{stats.contractual}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Personal CT + Coordinadores\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Búsqueda y Grid de Personal */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Directorio de Personal</span>\n            <div className=\"relative w-72\">\n              <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Buscar por cédula, nombre o email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-8\"\n                data-testid=\"input-search-people\"\n              />\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"rounded-md border\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Nombre Completo</TableHead>\n                  <TableHead>Cédula</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Teléfono</TableHead>\n                  <TableHead>Estado</TableHead>\n                  <TableHead className=\"text-right\">Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {filteredPeople.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"h-24 text-center\">\n                      {searchTerm ? \"No se encontraron personas con ese criterio\" : \"No hay personas registradas\"}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredPeople.map((person) => (\n                    <TableRow key={person.id} data-testid={`person-row-${person.id}`}>\n                      <TableCell className=\"font-medium\">\n                        {person.firstName} {person.lastName}\n                      </TableCell>\n                      <TableCell>{person.idCard}</TableCell>\n                      <TableCell>{person.email}</TableCell>\n                      <TableCell>{person.phone || \"No registrado\"}</TableCell>\n                      <TableCell>\n                        <Badge variant={person.isActive ? \"default\" : \"secondary\"}>\n                          {person.isActive ? \"Activo\" : \"Inactivo\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Link href={`/people/${person.id}`}>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            data-testid={`button-view-person-${person.id}`}\n                          >\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            Ver Detalle\n                          </Button>\n                        </Link>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n          \n          {filteredPeople.length > 0 && (\n            <div className=\"flex items-center justify-between space-x-2 py-4\">\n              <div className=\"text-sm text-muted-foreground\">\n                Mostrando {filteredPeople.length} de {people.length} personas\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":11355},"client/src/pages/PersonDetail.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { Person, Publication, FamilyMember, WorkExperience, Training, Book, EmergencyContact } from \"@shared/schema\";\nimport PublicationForm from \"@/components/forms/PublicationForm\";\nimport FamilyMemberForm from \"@/components/forms/FamilyMemberForm\";\nimport WorkExperienceForm from \"@/components/forms/WorkExperienceForm\";\nimport TrainingForm from \"@/components/forms/TrainingForm\";\nimport BookForm from \"@/components/forms/BookForm\";\nimport EmergencyContactForm from \"@/components/forms/EmergencyContactForm\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  User, \n  FileText, \n  Briefcase, \n  GraduationCap, \n  BookOpen, \n  Users, \n  Phone, \n  Heart, \n  CreditCard,\n  ArrowLeft,\n  Edit,\n  Plus,\n  Trash2\n} from \"lucide-react\";\nimport { Dialog, DialogContent, DialogDescription, DialogTitle, DialogHeader, DialogTrigger } from \"@/components/ui/dialog\";\nimport PersonForm from \"@/components/forms/PersonForm\";\n\nexport default function PersonDetail() {\n  const { id } = useParams();\n  const [isEditFormOpen, setIsEditFormOpen] = useState(false);\n  const [isPublicationFormOpen, setIsPublicationFormOpen] = useState(false);\n  const [editingPublication, setEditingPublication] = useState<Publication | undefined>();\n  const [isFamilyFormOpen, setIsFamilyFormOpen] = useState(false);\n  const [editingFamilyMember, setEditingFamilyMember] = useState<FamilyMember | undefined>();\n  const [isWorkExpFormOpen, setIsWorkExpFormOpen] = useState(false);\n  const [editingWorkExperience, setEditingWorkExperience] = useState<WorkExperience | undefined>();\n  const [isTrainingFormOpen, setIsTrainingFormOpen] = useState(false);\n  const [editingTraining, setEditingTraining] = useState<Training | undefined>();\n  const [isBookFormOpen, setIsBookFormOpen] = useState(false);\n  const [editingBook, setEditingBook] = useState<Book | undefined>();\n  const [isEmergencyContactFormOpen, setIsEmergencyContactFormOpen] = useState(false);\n  const [editingEmergencyContact, setEditingEmergencyContact] = useState<EmergencyContact | undefined>();\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: person, isLoading } = useQuery<Person>({\n    queryKey: [`/api/people/${id}`],\n    enabled: !!id,\n  });\n\n  const { data: publications = [], isLoading: isLoadingPublications } = useQuery<Publication[]>({\n    queryKey: [`/api/people/${id}/publications`],\n    enabled: !!id,\n  });\n\n  const { data: familyMembers = [], isLoading: isLoadingFamily } = useQuery<FamilyMember[]>({\n    queryKey: [`/api/people/${id}/family`],\n    enabled: !!id,\n  });\n\n  const { data: workExperiences = [], isLoading: isLoadingWorkExp } = useQuery<WorkExperience[]>({\n    queryKey: [`/api/people/${id}/work-experience`],\n    enabled: !!id,\n  });\n\n  const { data: trainings = [], isLoading: isLoadingTrainings } = useQuery<Training[]>({\n    queryKey: [`/api/people/${id}/trainings`],\n    enabled: !!id,\n  });\n\n  const { data: books = [], isLoading: isLoadingBooks } = useQuery<Book[]>({\n    queryKey: [`/api/people/${id}/books`],\n    enabled: !!id,\n  });\n\n  const { data: emergencyContacts = [], isLoading: isLoadingEmergencyContacts } = useQuery<EmergencyContact[]>({\n    queryKey: [`/api/people/${id}/emergency-contacts`],\n    enabled: !!id,\n  });\n\n  // Mutations\n  const createPublicationMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/publications\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/people/${id}/publications`] });\n      setIsPublicationFormOpen(false);\n      setEditingPublication(undefined);\n      toast({\n        title: \"Publicación creada\",\n        description: \"La publicación se ha creado correctamente.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la publicación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePublicationMutation = useMutation({\n    mutationFn: async ({ id: pubId, data }: { id: number; data: any }) => {\n      return apiRequest(\"PUT\", `/api/publications/${pubId}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/people/${id}/publications`] });\n      setIsPublicationFormOpen(false);\n      setEditingPublication(undefined);\n      toast({\n        title: \"Publicación actualizada\",\n        description: \"La publicación se ha actualizado correctamente.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar la publicación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePublicationMutation = useMutation({\n    mutationFn: async (pubId: number) => {\n      return apiRequest(\"DELETE\", `/api/publications/${pubId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/people/${id}/publications`] });\n      toast({\n        title: \"Publicación eliminada\",\n        description: \"La publicación se ha eliminado correctamente.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar la publicación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreatePublication = async (data: any) => {\n    createPublicationMutation.mutate(data);\n  };\n\n  const handleUpdatePublication = async (data: any) => {\n    if (editingPublication) {\n      updatePublicationMutation.mutate({ id: editingPublication.id, data });\n    }\n  };\n\n  const handleEditPublication = (publication: Publication) => {\n    setEditingPublication(publication);\n    setIsPublicationFormOpen(true);\n  };\n\n  const handleDeletePublication = (pubId: number) => {\n    if (confirm(\"¿Está seguro de que desea eliminar esta publicación?\")) {\n      deletePublicationMutation.mutate(pubId);\n    }\n  };\n\n  // Family Member Mutations\n  const createFamilyMemberMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/family\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/people/${id}/family`] });\n      setIsFamilyFormOpen(false);\n      setEditingFamilyMember(undefined);\n      toast({\n        title: \"Carga familiar creada\",\n        description: \"La carga familiar se ha creado correctamente.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la carga familiar.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateFamilyMember = async (data: any) => {\n    createFamilyMemberMutation.mutate(data);\n  };\n\n  // Work Experience Mutations\n  const createWorkExperienceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/work-experience\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/people/${id}/work-experience`] });\n      setIsWorkExpFormOpen(false);\n      setEditingWorkExperience(undefined);\n      toast({\n        title: \"Experiencia laboral creada\",\n        description: \"La experiencia laboral se ha creado correctamente.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la experiencia laboral.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateWorkExperience = async (data: any) => {\n    createWorkExperienceMutation.mutate(data);\n  };\n\n  // Training Mutations\n  const createTrainingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/trainings\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/people/${id}/trainings`] });\n      setIsTrainingFormOpen(false);\n      setEditingTraining(undefined);\n      toast({\n        title: \"Capacitación creada\",\n        description: \"La capacitación se ha creado correctamente.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo crear la capacitación.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateTraining = async (data: any) => {\n    createTrainingMutation.mutate(data);\n  };\n\n  // Book Mutations\n  const createBookMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/books\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/people/${id}/books`] });\n      setIsBookFormOpen(false);\n      setEditingBook(undefined);\n      toast({\n        title: \"Libro agregado\",\n        description: \"El libro se ha agregado correctamente.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo agregar el libro.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateBook = async (data: any) => {\n    createBookMutation.mutate(data);\n  };\n\n  // Emergency Contact Mutations\n  const createEmergencyContactMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/emergency-contacts\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/people/${id}/emergency-contacts`] });\n      setIsEmergencyContactFormOpen(false);\n      setEditingEmergencyContact(undefined);\n      toast({\n        title: \"Contacto de emergencia agregado\",\n        description: \"El contacto de emergencia se ha agregado correctamente.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo agregar el contacto de emergencia.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateEmergencyContact = async (data: any) => {\n    createEmergencyContactMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-300 rounded w-1/4 mb-6\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"h-96 bg-gray-300 rounded\"></div>\n              <div className=\"lg:col-span-2 h-96 bg-gray-300 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!person) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center py-12\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Persona no encontrada</h2>\n            <p className=\"mt-2 text-gray-600\">La persona que buscas no existe o fue eliminada.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" onClick={() => window.history.back()}>\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Volver\n              </Button>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">\n                  {person.firstName} {person.lastName}\n                </h1>\n                <p className=\"text-gray-600\">CI: {person.idCard}</p>\n              </div>\n            </div>\n            <Button \n              onClick={() => setIsEditFormOpen(true)}\n              className=\"bg-uta-blue hover:bg-uta-blue/90\"\n            >\n              <Edit className=\"mr-2 h-4 w-4\" />\n              Editar Información\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Información Personal */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <User className=\"mr-2 h-5 w-5\" />\n                  Información Personal\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Estado</label>\n                  <div className=\"mt-1\">\n                    <Badge variant={person.isActive ? \"default\" : \"secondary\"}>\n                      {person.isActive ? \"Activo\" : \"Inactivo\"}\n                    </Badge>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"text-sm font-medium text-gray-500\">Correo Electrónico</label>\n                  <p className=\"mt-1 text-gray-900\">{person.email}</p>\n                </div>\n\n                {person.phone && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Teléfono</label>\n                    <p className=\"mt-1 text-gray-900\">{person.phone}</p>\n                  </div>\n                )}\n\n                {person.birthDate && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Fecha de Nacimiento</label>\n                    <p className=\"mt-1 text-gray-900\">\n                      {new Date(person.birthDate).toLocaleDateString('es-EC', {\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric'\n                      })}\n                    </p>\n                  </div>\n                )}\n\n                {person.sex && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Sexo</label>\n                    <p className=\"mt-1 text-gray-900\">{person.sex}</p>\n                  </div>\n                )}\n\n                {person.gender && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Género</label>\n                    <p className=\"mt-1 text-gray-900\">{person.gender}</p>\n                  </div>\n                )}\n\n                {person.address && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Dirección</label>\n                    <p className=\"mt-1 text-gray-900\">{person.address}</p>\n                  </div>\n                )}\n\n                {person.disability && (\n                  <div>\n                    <label className=\"text-sm font-medium text-gray-500\">Discapacidad</label>\n                    <p className=\"mt-1 text-gray-900\">{person.disability}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Hoja de Vida - Secciones */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Publicaciones Científicas */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <FileText className=\"mr-2 h-5 w-5\" />\n                    Publicaciones Científicas\n                  </div>\n                  <Dialog open={isPublicationFormOpen} onOpenChange={setIsPublicationFormOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-uta-blue hover:bg-uta-blue/90\"\n                        onClick={() => {\n                          setEditingPublication(undefined);\n                          setIsPublicationFormOpen(true);\n                        }}\n                        data-testid=\"button-add-publication\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Agregar\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" aria-describedby=\"publication-dialog-description\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingPublication ? \"Editar Publicación\" : \"Nueva Publicación\"}\n                        </DialogTitle>\n                        <DialogDescription id=\"publication-dialog-description\">\n                          {editingPublication ? \"Modifica los datos de la publicación científica\" : \"Agrega una nueva publicación científica al perfil\"}\n                        </DialogDescription>\n                      </DialogHeader>\n                      <PublicationForm\n                        personId={parseInt(id!)}\n                        publication={editingPublication}\n                        onSubmit={editingPublication ? handleUpdatePublication : handleCreatePublication}\n                        onCancel={() => {\n                          setIsPublicationFormOpen(false);\n                          setEditingPublication(undefined);\n                        }}\n                        isLoading={createPublicationMutation.isPending || updatePublicationMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingPublications ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2].map((i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : publications.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <FileText className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n                    <p>No hay publicaciones registradas</p>\n                    <p className=\"text-sm\">Agrega publicaciones científicas y artículos</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {publications.map((publication) => (\n                      <div \n                        key={publication.id} \n                        className=\"p-4 border border-gray-200 rounded-lg hover:shadow-sm transition-shadow\"\n                        data-testid={`publication-item-${publication.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-semibold text-gray-900 mb-2\" data-testid={`publication-title-${publication.id}`}>\n                              {publication.title}\n                            </h4>\n                            {publication.journal && (\n                              <p className=\"text-sm text-gray-600 mb-1\">\n                                <span className=\"font-medium\">Revista:</span> {publication.journal}\n                              </p>\n                            )}\n                            {publication.type && (\n                              <p className=\"text-sm text-gray-600 mb-1\">\n                                <span className=\"font-medium\">Tipo:</span> {publication.type}\n                              </p>\n                            )}\n                            {publication.publicationDate && (\n                              <p className=\"text-sm text-gray-600 mb-1\">\n                                <span className=\"font-medium\">Fecha:</span> {new Date(publication.publicationDate).toLocaleDateString('es-EC')}\n                              </p>\n                            )}\n                            {publication.doi && (\n                              <p className=\"text-sm text-gray-600 mb-1\">\n                                <span className=\"font-medium\">DOI:</span> {publication.doi}\n                              </p>\n                            )}\n                            {publication.description && (\n                              <p className=\"text-sm text-gray-700 mt-2\">{publication.description}</p>\n                            )}\n                          </div>\n                          <div className=\"flex gap-2 ml-4\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleEditPublication(publication)}\n                              data-testid={`button-edit-publication-${publication.id}`}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => handleDeletePublication(publication.id)}\n                              disabled={deletePublicationMutation.isPending}\n                              data-testid={`button-delete-publication-${publication.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Cargas Familiares */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"mr-2 h-5 w-5\" />\n                    Cargas Familiares\n                  </div>\n                  <Dialog open={isFamilyFormOpen} onOpenChange={setIsFamilyFormOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-uta-blue hover:bg-uta-blue/90\"\n                        onClick={() => {\n                          setEditingFamilyMember(undefined);\n                          setIsFamilyFormOpen(true);\n                        }}\n                        data-testid=\"button-add-family-member\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Agregar\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" aria-describedby=\"family-dialog-description\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingFamilyMember ? \"Editar Carga Familiar\" : \"Nueva Carga Familiar\"}\n                        </DialogTitle>\n                        <DialogDescription id=\"family-dialog-description\">\n                          {editingFamilyMember ? \"Modifica la información del miembro familiar\" : \"Registra un nuevo dependiente o familiar\"}\n                        </DialogDescription>\n                      </DialogHeader>\n                      <FamilyMemberForm\n                        personId={parseInt(id!)}\n                        familyMember={editingFamilyMember}\n                        onSubmit={handleCreateFamilyMember}\n                        onCancel={() => {\n                          setIsFamilyFormOpen(false);\n                          setEditingFamilyMember(undefined);\n                        }}\n                        isLoading={createFamilyMemberMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingFamily ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2].map((i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : familyMembers.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Users className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n                    <p>No hay cargas familiares registradas</p>\n                    <p className=\"text-sm\">Agrega información sobre dependientes familiares</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {familyMembers.map((member) => (\n                      <div \n                        key={member.id} \n                        className=\"p-3 border border-gray-200 rounded-lg\"\n                        data-testid={`family-member-item-${member.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900\">\n                              {member.firstName} {member.lastName}\n                            </h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {member.relationship}\n                              {member.idCard && ` • CI: ${member.idCard}`}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Experiencia Laboral */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Briefcase className=\"mr-2 h-5 w-5\" />\n                    Experiencia Laboral\n                  </div>\n                  <Dialog open={isWorkExpFormOpen} onOpenChange={setIsWorkExpFormOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-uta-blue hover:bg-uta-blue/90\"\n                        onClick={() => {\n                          setEditingWorkExperience(undefined);\n                          setIsWorkExpFormOpen(true);\n                        }}\n                        data-testid=\"button-add-work-experience\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Agregar\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" aria-describedby=\"work-dialog-description\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingWorkExperience ? \"Editar Experiencia Laboral\" : \"Nueva Experiencia Laboral\"}\n                        </DialogTitle>\n                        <DialogDescription id=\"work-dialog-description\">\n                          {editingWorkExperience ? \"Modifica la información de la experiencia laboral\" : \"Registra una nueva experiencia de trabajo\"}\n                        </DialogDescription>\n                      </DialogHeader>\n                      <WorkExperienceForm\n                        personId={parseInt(id!)}\n                        workExperience={editingWorkExperience}\n                        onSubmit={handleCreateWorkExperience}\n                        onCancel={() => {\n                          setIsWorkExpFormOpen(false);\n                          setEditingWorkExperience(undefined);\n                        }}\n                        isLoading={createWorkExperienceMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingWorkExp ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2].map((i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : workExperiences.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Briefcase className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n                    <p>No hay experiencia laboral registrada</p>\n                    <p className=\"text-sm\">Agrega experiencias laborales y empleos anteriores</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {workExperiences.map((experience) => (\n                      <div \n                        key={experience.id} \n                        className=\"p-3 border border-gray-200 rounded-lg\"\n                        data-testid={`work-experience-item-${experience.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900\">\n                              {experience.position}\n                            </h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {experience.company}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {new Date(experience.startDate).toLocaleDateString('es-EC')}\n                              {experience.isCurrent ? ' - Actual' : experience.endDate ? ` - ${new Date(experience.endDate).toLocaleDateString('es-EC')}` : ''}\n                            </p>\n                            {experience.duties && (\n                              <p className=\"text-xs text-gray-600 mt-1\">{experience.duties}</p>\n                            )}\n                          </div>\n                          {experience.isCurrent && (\n                            <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full\">\n                              Actual\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Capacitaciones */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <GraduationCap className=\"mr-2 h-5 w-5\" />\n                    Capacitaciones y Cursos\n                  </div>\n                  <Dialog open={isTrainingFormOpen} onOpenChange={setIsTrainingFormOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-uta-blue hover:bg-uta-blue/90\"\n                        onClick={() => {\n                          setEditingTraining(undefined);\n                          setIsTrainingFormOpen(true);\n                        }}\n                        data-testid=\"button-add-training\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Agregar\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" aria-describedby=\"training-dialog-description\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingTraining ? \"Editar Capacitación\" : \"Nueva Capacitación\"}\n                        </DialogTitle>\n                        <DialogDescription id=\"training-dialog-description\">\n                          {editingTraining ? \"Modifica la información de la capacitación\" : \"Registra un nuevo curso, seminario o capacitación\"}\n                        </DialogDescription>\n                      </DialogHeader>\n                      <TrainingForm\n                        personId={parseInt(id!)}\n                        training={editingTraining}\n                        onSubmit={handleCreateTraining}\n                        onCancel={() => {\n                          setIsTrainingFormOpen(false);\n                          setEditingTraining(undefined);\n                        }}\n                        isLoading={createTrainingMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingTrainings ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2].map((i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : trainings.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <GraduationCap className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n                    <p>No hay capacitaciones registradas</p>\n                    <p className=\"text-sm\">Agrega cursos, seminarios y capacitaciones</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {trainings.map((training) => (\n                      <div \n                        key={training.id} \n                        className=\"p-3 border border-gray-200 rounded-lg\"\n                        data-testid={`training-item-${training.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900\">\n                              {training.name}\n                            </h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {training.institution} • {training.type}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {new Date(training.startDate).toLocaleDateString('es-EC')}\n                              {training.endDate && ` - ${new Date(training.endDate).toLocaleDateString('es-EC')}`}\n                              {training.durationHours && ` • ${training.durationHours} horas`}\n                            </p>\n                            {training.description && (\n                              <p className=\"text-xs text-gray-600 mt-1\">{training.description}</p>\n                            )}\n                          </div>\n                          {training.hasCertificate && (\n                            <span className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\">\n                              Certificado\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Libros */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <BookOpen className=\"mr-2 h-5 w-5\" />\n                    Libros Publicados\n                  </div>\n                  <Dialog open={isBookFormOpen} onOpenChange={setIsBookFormOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-uta-blue hover:bg-uta-blue/90\"\n                        onClick={() => {\n                          setEditingBook(undefined);\n                          setIsBookFormOpen(true);\n                        }}\n                        data-testid=\"button-add-book\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Agregar\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" aria-describedby=\"book-dialog-description\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingBook ? \"Editar Libro\" : \"Nuevo Libro\"}\n                        </DialogTitle>\n                        <DialogDescription id=\"book-dialog-description\">\n                          {editingBook ? \"Modifica la información del libro\" : \"Registra un nuevo libro o capítulo publicado\"}\n                        </DialogDescription>\n                      </DialogHeader>\n                      <BookForm\n                        personId={parseInt(id!)}\n                        book={editingBook}\n                        onSubmit={handleCreateBook}\n                        onCancel={() => {\n                          setIsBookFormOpen(false);\n                          setEditingBook(undefined);\n                        }}\n                        isLoading={createBookMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingBooks ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2].map((i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : books.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <BookOpen className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n                    <p>No hay libros registrados</p>\n                    <p className=\"text-sm\">Agrega libros y capítulos publicados</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {books.map((book) => (\n                      <div \n                        key={book.id} \n                        className=\"p-3 border border-gray-200 rounded-lg\"\n                        data-testid={`book-item-${book.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900\">\n                              {book.title}\n                            </h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {book.coAuthors}\n                              {book.publisher && ` • ${book.publisher}`}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">\n                              {book.category}\n                              {book.publicationDate && ` • ${new Date(book.publicationDate).toLocaleDateString('es-EC')}`}\n                            </p>\n                            {book.description && (\n                              <p className=\"text-xs text-gray-600 mt-1\">{book.description}</p>\n                            )}\n                          </div>\n                          {book.isbn && (\n                            <span className=\"px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full\">\n                              ISBN\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Contactos de Emergencia */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Phone className=\"mr-2 h-5 w-5\" />\n                    Contactos de Emergencia\n                  </div>\n                  <Dialog open={isEmergencyContactFormOpen} onOpenChange={setIsEmergencyContactFormOpen}>\n                    <DialogTrigger asChild>\n                      <Button \n                        size=\"sm\" \n                        className=\"bg-uta-blue hover:bg-uta-blue/90\"\n                        onClick={() => {\n                          setEditingEmergencyContact(undefined);\n                          setIsEmergencyContactFormOpen(true);\n                        }}\n                        data-testid=\"button-add-emergency-contact\"\n                      >\n                        <Plus className=\"mr-2 h-4 w-4\" />\n                        Agregar\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\" aria-describedby=\"emergency-contact-dialog-description\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingEmergencyContact ? \"Editar Contacto de Emergencia\" : \"Nuevo Contacto de Emergencia\"}\n                        </DialogTitle>\n                        <DialogDescription id=\"emergency-contact-dialog-description\">\n                          {editingEmergencyContact ? \"Modifica la información del contacto de emergencia\" : \"Registra un nuevo contacto para emergencias\"}\n                        </DialogDescription>\n                      </DialogHeader>\n                      <EmergencyContactForm\n                        personId={parseInt(id!)}\n                        emergencyContact={editingEmergencyContact}\n                        onSubmit={handleCreateEmergencyContact}\n                        onCancel={() => {\n                          setIsEmergencyContactFormOpen(false);\n                          setEditingEmergencyContact(undefined);\n                        }}\n                        isLoading={createEmergencyContactMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoadingEmergencyContacts ? (\n                  <div className=\"space-y-3\">\n                    {[1, 2].map((i) => (\n                      <div key={i} className=\"animate-pulse\">\n                        <div className=\"h-4 bg-gray-300 rounded w-3/4 mb-2\"></div>\n                        <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : emergencyContacts.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <Phone className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n                    <p>No hay contactos de emergencia registrados</p>\n                    <p className=\"text-sm\">Agrega contactos para situaciones de emergencia</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {emergencyContacts.map((contact) => (\n                      <div \n                        key={contact.id} \n                        className=\"p-3 border border-gray-200 rounded-lg\"\n                        data-testid={`emergency-contact-item-${contact.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900\">\n                              {contact.firstName} {contact.lastName}\n                            </h4>\n                            <p className=\"text-sm text-gray-600\">\n                              {contact.relationship} • {contact.phone}\n                            </p>\n                            {contact.email && (\n                              <p className=\"text-xs text-gray-500\">{contact.email}</p>\n                            )}\n                            {contact.address && (\n                              <p className=\"text-xs text-gray-500\">{contact.address}</p>\n                            )}\n                          </div>\n                          {contact.isPrimary && (\n                            <span className=\"px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full\">\n                              Principal\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Información Médica */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <Heart className=\"mr-2 h-5 w-5\" />\n                    Información Médica\n                  </div>\n                  <Button size=\"sm\" className=\"bg-uta-blue hover:bg-uta-blue/90\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Agregar\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Heart className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n                  <p>No hay información médica registrada</p>\n                  <p className=\"text-sm\">Agrega enfermedades catastróficas e información médica</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Cuentas Bancarias */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <CreditCard className=\"mr-2 h-5 w-5\" />\n                    Cuentas Bancarias\n                  </div>\n                  <Button size=\"sm\" className=\"bg-uta-blue hover:bg-uta-blue/90\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Agregar\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-8 text-gray-500\">\n                  <CreditCard className=\"mx-auto h-12 w-12 mb-4 opacity-50\" />\n                  <p>No hay cuentas bancarias registradas</p>\n                  <p className=\"text-sm\">Agrega información de cuentas bancarias</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Diálogo de Edición */}\n        <Dialog open={isEditFormOpen} onOpenChange={setIsEditFormOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogTitle>Modificar Información Personal</DialogTitle>\n            <PersonForm \n              person={person}\n              onSuccess={() => setIsEditFormOpen(false)}\n              onCancel={() => setIsEditFormOpen(false)}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":48117}}}